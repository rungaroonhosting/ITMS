<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Department extends Model
{
    use HasFactory, SoftDeletes;

    /**
     * The attributes that are mass assignable.
     */
    protected $fillable = [
        'name',
        'code', 
        'description',
        'is_active',
        'express_enabled',
        'express_enabled_at'
    ];

    /**
     * The attributes that should be cast.
     */
    protected $casts = [
        'is_active' => 'boolean',
        'express_enabled' => 'boolean',
        'express_enabled_at' => 'datetime',
        'created_at' => 'datetime',
        'updated_at' => 'datetime',
        'deleted_at' => 'datetime',
    ];

    /**
     * The attributes that should have default values.
     */
    protected $attributes = [
        'is_active' => true,
        'express_enabled' => false,
    ];

    /**
     * Soft delete configuration
     */
    protected $dates = ['deleted_at'];

    /**
     * Boot the model.
     */
    protected static function boot()
    {
        parent::boot();

        // อัพเดต express_enabled_at เมื่อมีการเปลี่ยนแปลง express_enabled
        static::updating(function ($department) {
            if ($department->isDirty('express_enabled')) {
                $department->express_enabled_at = now();
            }
        });

        // Log การเปลี่ยนแปลง
        static::updated(function ($department) {
            if ($department->wasChanged('express_enabled')) {
                \Log::info('Department Express status changed', [
                    'department_id' => $department->id,
                    'name' => $department->name,
                    'express_enabled' => $department->express_enabled,
                    'changed_at' => $department->express_enabled_at,
                    'changed_by' => auth()->id()
                ]);
            }
        });

        // Log การลบ
        static::deleting(function ($department) {
            \Log::info('Department being deleted', [
                'department_id' => $department->id,
                'name' => $department->name,
                'employee_count' => $department->employees()->count(),
                'deleted_by' => auth()->id()
            ]);
        });

        // Log การกู้คืน
        static::restored(function ($department) {
            \Log::info('Department restored', [
                'department_id' => $department->id,
                'name' => $department->name,
                'restored_by' => auth()->id()
            ]);
        });
    }

    /**
     * Get the employees for the department.
     */
    public function employees()
    {
        return $this->hasMany(Employee::class);
    }

    /**
     * Get active employees only.
     */
    public function activeEmployees()
    {
        return $this->hasMany(Employee::class)->where('status', 'active');
    }

    /**
     * Get employees with Express credentials.
     */
    public function expressEmployees()
    {
        return $this->hasMany(Employee::class)
            ->whereNotNull('express_username')
            ->whereNotNull('express_password');
    }

    /**
     * Scope for active departments only.
     */
    public function scopeActive($query)
    {
        return $query->where('is_active', true);
    }

    /**
     * Scope for Express-enabled departments only.
     */
    public function scopeExpressEnabled($query)
    {
        return $query->where('express_enabled', true);
    }

    /**
     * Scope to include soft deleted records
     */
    public function scopeWithTrashed($query)
    {
        return $query->withTrashed();
    }

    /**
     * Scope for only soft deleted records
     */
    public function scopeOnlyTrashed($query)
    {
        return $query->onlyTrashed();
    }

    /**
     * Check if department supports Express.
     */
    public function supportsExpress(): bool
    {
        return $this->express_enabled === true;
    }

    /**
     * Check if department can be deleted safely
     */
    public function canBeDeleted(): bool
    {
        return $this->employees()->count() === 0;
    }

    /**
     * Get Express statistics for this department.
     */
    public function getExpressStatsAttribute()
    {
        if (!$this->express_enabled) {
            return null;
        }

        $totalEmployees = $this->employees()->count();
        $expressUsers = $this->expressEmployees()->count();

        return [
            'total_employees' => $totalEmployees,
            'express_users' => $expressUsers,
            'coverage_percentage' => $totalEmployees > 0 
                ? round(($expressUsers / $totalEmployees) * 100, 1) 
                : 0,
            'missing_count' => $totalEmployees - $expressUsers
        ];
    }

    /**
     * Get status display text
     */
    public function getStatusDisplayAttribute(): string
    {
        if ($this->trashed()) {
            return 'ถูกลบ';
        }
        
        return $this->is_active ? 'ใช้งาน' : 'ปิดใช้งาน';
    }

    /**
     * Enable Express support for this department.
     */
    public function enableExpress(): bool
    {
        try {
            $this->update([
                'express_enabled' => true,
                'express_enabled_at' => now()
            ]);

            // สร้าง Express credentials สำหรับพนักงานที่ยังไม่มี
            $employeesWithoutExpress = $this->employees()
                ->whereNull('express_username')
                ->get();

            foreach ($employeesWithoutExpress as $employee) {
                if (method_exists($employee, 'generateExpressCredentials')) {
                    $employee->generateExpressCredentials();
                }
            }

            \Log::info('Express enabled for department', [
                'department_id' => $this->id,
                'generated_credentials' => $employeesWithoutExpress->count()
            ]);

            return true;

        } catch (\Exception $e) {
            \Log::error('Failed to enable Express', [
                'department_id' => $this->id,
                'error' => $e->getMessage()
            ]);

            return false;
        }
    }

    /**
     * Disable Express support for this department.
     */
    public function disableExpress(): bool
    {
        try {
            $clearedCount = $this->employees()
                ->whereNotNull('express_username')
                ->count();

            // ล้าง Express credentials ของพนักงานทั้งหมดในแผนก
            $this->employees()->update([
                'express_username' => null,
                'express_password' => null
            ]);

            $this->update([
                'express_enabled' => false,
                'express_enabled_at' => now()
            ]);

            \Log::info('Express disabled for department', [
                'department_id' => $this->id,
                'cleared_credentials' => $clearedCount
            ]);

            return true;

        } catch (\Exception $e) {
            \Log::error('Failed to disable Express', [
                'department_id' => $this->id,
                'error' => $e->getMessage()
            ]);

            return false;
        }
    }

    /**
     * Generate Express credentials for all employees in this department.
     */
    public function generateExpressCredentialsForAll(): int
    {
        if (!$this->express_enabled) {
            return 0;
        }

        $employees = $this->employees()
            ->whereNull('express_username')
            ->get();

        $generatedCount = 0;

        foreach ($employees as $employee) {
            if (method_exists($employee, 'generateExpressCredentials') && $employee->generateExpressCredentials()) {
                $generatedCount++;
            }
        }

        return $generatedCount;
    }

    /**
     * Get Express usage summary.
     */
    public function getExpressUsageSummary(): array
    {
        $totalEmployees = $this->employees()->count();
        $expressUsers = $this->expressEmployees()->count();
        $activeExpressUsers = $this->employees()
            ->where('status', 'active')
            ->whereNotNull('express_username')
            ->count();

        return [
            'department_name' => $this->name,
            'department_code' => $this->code,
            'express_enabled' => $this->express_enabled,
            'express_enabled_at' => $this->express_enabled_at,
            'total_employees' => $totalEmployees,
            'active_employees' => $this->activeEmployees()->count(),
            'express_users' => $expressUsers,
            'active_express_users' => $activeExpressUsers,
            'coverage_all' => $totalEmployees > 0 ? round(($expressUsers / $totalEmployees) * 100, 1) : 0,
            'coverage_active' => $this->activeEmployees()->count() > 0 
                ? round(($activeExpressUsers / $this->activeEmployees()->count()) * 100, 1) 
                : 0
        ];
    }

    /**
     * Auto-detect if this department should have Express based on name.
     */
    public function shouldHaveExpress(): bool
    {
        $accountingKeywords = [
            'บัญชี', 'การเงิน', 'accounting', 'finance', 'acc', 'fin',
            'financial', 'accountant', 'treasury', 'audit', 'เงิน'
        ];

        $name = strtolower($this->name);
        $code = strtolower($this->code);
        
        foreach ($accountingKeywords as $keyword) {
            if (str_contains($name, strtolower($keyword)) || str_contains($code, strtolower($keyword))) {
                return true;
            }
        }

        return false;
    }

    /**
     * Format department name with Express indicator.
     */
    public function getDisplayNameAttribute(): string
    {
        $name = $this->name;
        
        if ($this->express_enabled) {
            $name .= ' ⚡';
        }

        if (!$this->is_active) {
            $name .= ' (ปิดใช้งาน)';
        }

        if ($this->trashed()) {
            $name .= ' (ถูกลบ)';
        }

        return $name;
    }

    /**
     * Get department status badge HTML.
     */
    public function getStatusBadgeAttribute(): string
    {
        if ($this->trashed()) {
            return '<span class="badge bg-danger">ถูกลบ</span>';
        }

        if (!$this->is_active) {
            return '<span class="badge bg-secondary">ปิดใช้งาน</span>';
        }

        if ($this->express_enabled) {
            return '<span class="badge bg-warning">⚡ Express</span>';
        }

        return '<span class="badge bg-success">เปิดใช้งาน</span>';
    }

    /**
     * Restore a soft deleted department
     */
    public function restoreDepartment(): bool
    {
        try {
            if (!$this->trashed()) {
                return false;
            }

            $this->restore();
            return true;
        } catch (\Exception $e) {
            \Log::error('Failed to restore department', [
                'department_id' => $this->id,
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }

    /**
     * Force delete department permanently
     */
    public function forceDeleteDepartment(): bool
    {
        try {
            if ($this->employees()->count() > 0) {
                return false;
            }

            $this->forceDelete();
            return true;
        } catch (\Exception $e) {
            \Log::error('Failed to force delete department', [
                'department_id' => $this->id,
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }

    /**
     * Convert to array for API responses.
     */
    public function toApiArray(): array
    {
        return [
            'id' => $this->id,
            'name' => $this->name,
            'code' => $this->code,
            'description' => $this->description,
            'is_active' => $this->is_active,
            'express_enabled' => $this->express_enabled,
            'express_enabled_at' => $this->express_enabled_at?->toISOString(),
            'employee_count' => $this->employees()->count(),
            'express_user_count' => $this->expressEmployees()->count(),
            'express_stats' => $this->express_stats,
            'can_be_deleted' => $this->canBeDeleted(),
            'is_deleted' => $this->trashed(),
            'created_at' => $this->created_at->toISOString(),
            'updated_at' => $this->updated_at->toISOString(),
            'deleted_at' => $this->deleted_at?->toISOString()
        ];
    }

    /**
     * Search departments by name or code
     */
    public function scopeSearch($query, $term)
    {
        if (empty($term)) {
            return $query;
        }

        return $query->where(function ($q) use ($term) {
            $q->where('name', 'LIKE', "%{$term}%")
              ->orWhere('code', 'LIKE', "%{$term}%")
              ->orWhere('description', 'LIKE', "%{$term}%");
        });
    }

    /**
     * Get departments with employee counts
     */
    public function scopeWithEmployeeCounts($query)
    {
        return $query->withCount([
            'employees',
            'activeEmployees',
            'expressEmployees'
        ]);
    }
}
