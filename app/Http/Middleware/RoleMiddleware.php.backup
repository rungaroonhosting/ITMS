<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class RoleMiddleware
{
    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure(\Illuminate\Http\Request): (\Illuminate\Http\Response|\Illuminate\Http\RedirectResponse)  $next
     * @param  string  ...$roles
     * @return \Illuminate\Http\Response|\Illuminate\Http\RedirectResponse
     */
    public function handle(Request $request, Closure $next, ...$roles)
    {
        if (!Auth::check()) {
            return redirect()->route('login')->with('error', 'กรุณาเข้าสู่ระบบก่อนใช้งาน');
        }

        $user = Auth::user();
        $userRole = $user->role;

        // Check if user has any of the required roles
        if (!in_array($userRole, $roles)) {
            if ($request->expectsJson()) {
                return response()->json([
                    'message' => 'คุณไม่มีสิทธิ์เข้าถึงหน้านี้',
                    'required_roles' => $roles,
                    'current_role' => $userRole
                ], 403);
            }

            // Redirect based on user role
            $redirectRoute = $this->getRedirectRouteByRole($userRole);
            return redirect()->route($redirectRoute)
                ->with('error', 'คุณไม่มีสิทธิ์เข้าถึงหน้านี้');
        }

        return $next($request);
    }

    /**
     * Get appropriate redirect route based on user role
     */
    private function getRedirectRouteByRole($role)
    {
        switch ($role) {
            case 'super_admin':
            case 'it_admin':
                return 'dashboard';
            case 'employee':
                return 'my.profile';
            default:
                return 'dashboard';
        }
    }
}

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class SuperAdminMiddleware
{
    /**
     * Handle an incoming request for Super Admin only
     */
    public function handle(Request $request, Closure $next)
    {
        if (!Auth::check()) {
            return redirect()->route('login')->with('error', 'กรุณาเข้าสู่ระบบก่อนใช้งาน');
        }

        $user = Auth::user();

        if ($user->role !== 'super_admin') {
            if ($request->expectsJson()) {
                return response()->json([
                    'message' => 'ต้องการสิทธิ์ Super Administrator',
                    'current_role' => $user->role
                ], 403);
            }

            return redirect()->route('dashboard')
                ->with('error', 'ต้องการสิทธิ์ Super Administrator เท่านั้น');
        }

        return $next($request);
    }
}

<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class ITAdminMiddleware
{
    /**
     * Handle an incoming request for IT Admin (includes Super Admin)
     */
    public function handle(Request $request, Closure $next)
    {
        if (!Auth::check()) {
            return redirect()->route('login')->with('error', 'กรุณาเข้าสู่ระบบก่อนใช้งาน');
        }

        $user = Auth::user();
        $allowedRoles = ['super_admin', 'it_admin'];

        if (!in_array($user->role, $allowedRoles)) {
            if ($request->expectsJson()) {
                return response()->json([
                    'message' => 'ต้องการสิทธิ์ IT Administrator',
                    'current_role' => $user->role
                ], 403);
            }

            return redirect()->route('dashboard')
                ->with('error', 'ต้องการสิทธิ์ IT Administrator');
        }

        return $next($request);
    }
}
