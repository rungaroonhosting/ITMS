<?php

namespace App\Http\Controllers;

use App\Models\Department;
use App\Models\Employee;
use Illuminate\Http\Request;
use Illuminate\Validation\Rule;

class DepartmentController extends Controller
{
    /**
     * Display a listing of the departments.
     */
    public function index()
    {
        $departments = Department::withCount(['employees'])
            ->orderBy('name')
            ->get();

        // คำนวณสถิติ Express
        $expressStats = [
            'total_express_departments' => Department::where('express_enabled', true)->count(),
            'total_express_users' => Employee::whereHas('department', function($query) {
                $query->where('express_enabled', true);
            })->whereNotNull('express_username')->count(),
            'express_coverage' => 0
        ];

        if ($departments->count() > 0) {
            $expressStats['express_coverage'] = round(
                ($expressStats['total_express_departments'] / $departments->count()) * 100, 1
            );
        }

        return view('departments.index', compact('departments', 'expressStats'));
    }

    /**
     * Show the form for creating a new department.
     */
    public function create()
    {
        return view('departments.create');
    }

    /**
     * Store a newly created department in storage.
     */
    public function store(Request $request)
    {
        // Validation rules
        $validated = $request->validate([
            'name' => 'required|string|max:255|unique:departments',
            'code' => 'required|string|max:10|unique:departments',
            'description' => 'nullable|string|max:1000',
        ]);

        // แก้ปัญหา checkbox - ใช้ boolean() helper แทน
        $data = array_merge($validated, [
            'is_active' => $request->boolean('is_active', true),  // default = true
            'express_enabled' => $request->boolean('express_enabled', false)  // default = false แน่นอน
        ]);

        // สร้างแผนก
        $department = Department::create($data);

        // Log การสร้างแผนก
        \Log::info('Department created', [
            'department_id' => $department->id,
            'name' => $department->name,
            'code' => $department->code,
            'express_enabled' => $department->express_enabled,
            'created_by' => auth()->id()
        ]);

        return redirect()
            ->route('departments.index')
            ->with('success', 'เพิ่มแผนก "' . $department->name . '" สำเร็จแล้ว!' . 
                ($department->express_enabled ? ' (รองรับ Express)' : ''));
    }

    /**
     * Display the specified department.
     */
    public function show(Department $department)
    {
        $department->load(['employees' => function($query) {
            $query->orderBy('name');
        }]);

        // สถิติ Express สำหรับแผนกนี้
        $expressStats = [];
        if ($department->express_enabled) {
            $expressStats = [
                'total_employees' => $department->employees->count(),
                'express_users' => $department->employees->whereNotNull('express_username')->count(),
                'coverage_percentage' => $department->employees->count() > 0 
                    ? round(($department->employees->whereNotNull('express_username')->count() / $department->employees->count()) * 100, 1)
                    : 0
            ];
        }

        return view('departments.show', compact('department', 'expressStats'));
    }

    /**
     * Show the form for editing the specified department.
     */
    public function edit(Department $department)
    {
        return view('departments.edit', compact('department'));
    }

    /**
     * Update the specified department in storage.
     */
    public function update(Request $request, Department $department)
    {
        // Validation rules
        $validated = $request->validate([
            'name' => ['required', 'string', 'max:255', Rule::unique('departments')->ignore($department->id)],
            'code' => ['required', 'string', 'max:10', Rule::unique('departments')->ignore($department->id)],
            'description' => 'nullable|string|max:1000',
        ]);

        // เก็บค่าเดิมเพื่อเปรียบเทียบ
        $oldExpressEnabled = $department->express_enabled;

        // แก้ปัญหา checkbox - ใช้ boolean() helper
        $data = array_merge($validated, [
            'is_active' => $request->boolean('is_active', true),
            'express_enabled' => $request->boolean('express_enabled', false)
        ]);

        // อัพเดตแผนก
        $department->update($data);

        // ถ้าปิด Express ให้ล้าง Express data ของพนักงานในแผนกนี้
        if ($oldExpressEnabled && !$department->express_enabled) {
            $department->employees()->update([
                'express_username' => null,
                'express_password' => null
            ]);

            \Log::info('Express disabled for department', [
                'department_id' => $department->id,
                'cleared_express_users' => $department->employees->count()
            ]);
        }

        // ถ้าเปิด Express ใหม่ ให้สร้าง Express credentials สำหรับพนักงานที่ยังไม่มี
        if (!$oldExpressEnabled && $department->express_enabled) {
            $employeesWithoutExpress = $department->employees()->whereNull('express_username')->get();
            
            foreach ($employeesWithoutExpress as $employee) {
                $employee->generateExpressCredentials();
            }

            \Log::info('Express enabled for department', [
                'department_id' => $department->id,
                'generated_express_users' => $employeesWithoutExpress->count()
            ]);
        }

        $message = 'แก้ไขแผนก "' . $department->name . '" สำเร็จแล้ว!';
        
        if ($oldExpressEnabled !== $department->express_enabled) {
            $message .= $department->express_enabled 
                ? ' (เปิดใช้งาน Express)'
                : ' (ปิดการใช้งาน Express)';
        }

        return redirect()
            ->route('departments.index')
            ->with('success', $message);
    }

    /**
     * Remove the specified department from storage.
     */
    public function destroy(Department $department)
    {
        // ตรวจสอบว่ามีพนักงานในแผนกหรือไม่
        if ($department->employees()->count() > 0) {
            return redirect()
                ->route('departments.index')
                ->with('error', 'ไม่สามารถลบแผนก "' . $department->name . '" ได้ เนื่องจากยังมีพนักงานในแผนกนี้');
        }

        $departmentName = $department->name;
        $department->delete();

        \Log::info('Department deleted', [
            'department_name' => $departmentName,
            'deleted_by' => auth()->id()
        ]);

        return redirect()
            ->route('departments.index')
            ->with('success', 'ลบแผนก "' . $departmentName . '" สำเร็จแล้ว!');
    }

    /**
     * Toggle Express support for a department via AJAX
     */
    public function toggleExpress(Request $request, Department $department)
    {
        try {
            $expressEnabled = $request->boolean('express_enabled');
            $oldValue = $department->express_enabled;
            
            $department->update(['express_enabled' => $expressEnabled]);

            // ถ้าปิด Express ให้ล้าง Express data
            if ($oldValue && !$expressEnabled) {
                $department->employees()->update([
                    'express_username' => null,
                    'express_password' => null
                ]);
            }

            // ถ้าเปิด Express ให้สร้าง credentials
            if (!$oldValue && $expressEnabled) {
                $employeesWithoutExpress = $department->employees()->whereNull('express_username')->get();
                
                foreach ($employeesWithoutExpress as $employee) {
                    $employee->generateExpressCredentials();
                }
            }

            return response()->json([
                'success' => true,
                'message' => $expressEnabled 
                    ? 'เปิดใช้งาน Express สำหรับแผนก "' . $department->name . '" แล้ว'
                    : 'ปิดการใช้งาน Express สำหรับแผนก "' . $department->name . '" แล้ว',
                'express_enabled' => $department->express_enabled
            ]);

        } catch (\Exception $e) {
            \Log::error('Express toggle failed', [
                'department_id' => $department->id,
                'error' => $e->getMessage()
            ]);

            return response()->json([
                'success' => false,
                'message' => 'เกิดข้อผิดพลาดในการเปลี่ยนแปลงสถานะ Express'
            ], 500);
        }
    }

    /**
     * Get Express statistics for all departments via AJAX
     */
    public function getExpressStats()
    {
        try {
            $departments = Department::with(['employees' => function($query) {
                $query->select('id', 'department_id', 'express_username');
            }])->get();

            $stats = [];
            $totalDepartments = $departments->count();
            $expressEnabledDepartments = 0;
            $totalExpressUsers = 0;
            $totalEmployees = 0;

            foreach ($departments as $department) {
                $employeeCount = $department->employees->count();
                $expressUserCount = $department->employees->whereNotNull('express_username')->count();
                
                $stats[] = [
                    'id' => $department->id,
                    'name' => $department->name,
                    'code' => $department->code,
                    'express_enabled' => $department->express_enabled,
                    'employee_count' => $employeeCount,
                    'express_user_count' => $expressUserCount,
                    'coverage_percentage' => $employeeCount > 0 ? round(($expressUserCount / $employeeCount) * 100, 1) : 0
                ];

                $totalEmployees += $employeeCount;
                $totalExpressUsers += $expressUserCount;
                
                if ($department->express_enabled) {
                    $expressEnabledDepartments++;
                }
            }

            return response()->json([
                'success' => true,
                'data' => [
                    'departments' => $stats,
                    'totals' => [
                        'total_departments' => $totalDepartments,
                        'express_departments' => $expressEnabledDepartments,
                        'total_employees' => $totalEmployees,
                        'total_express_users' => $totalExpressUsers,
                        'department_coverage' => $totalDepartments > 0 ? round(($expressEnabledDepartments / $totalDepartments) * 100, 1) : 0,
                        'user_coverage' => $totalEmployees > 0 ? round(($totalExpressUsers / $totalEmployees) * 100, 1) : 0
                    ]
                ]
            ]);

        } catch (\Exception $e) {
            \Log::error('Express stats failed', ['error' => $e->getMessage()]);

            return response()->json([
                'success' => false,
                'message' => 'เกิดข้อผิดพลาดในการดึงข้อมูลสถิติ'
            ], 500);
        }
    }

    /**
     * Bulk update Express support for multiple departments
     */
    public function bulkUpdateExpress(Request $request)
    {
        $validated = $request->validate([
            'department_ids' => 'required|array',
            'department_ids.*' => 'exists:departments,id',
            'express_enabled' => 'required|boolean'
        ]);

        try {
            $departments = Department::whereIn('id', $validated['department_ids'])->get();
            $updatedCount = 0;

            foreach ($departments as $department) {
                $oldValue = $department->express_enabled;
                $department->update(['express_enabled' => $validated['express_enabled']]);

                // Handle Express data based on the change
                if ($oldValue && !$validated['express_enabled']) {
                    // ปิด Express - ล้างข้อมูล
                    $department->employees()->update([
                        'express_username' => null,
                        'express_password' => null
                    ]);
                } elseif (!$oldValue && $validated['express_enabled']) {
                    // เปิด Express - สร้าง credentials
                    $employeesWithoutExpress = $department->employees()->whereNull('express_username')->get();
                    
                    foreach ($employeesWithoutExpress as $employee) {
                        $employee->generateExpressCredentials();
                    }
                }

                $updatedCount++;
            }

            $action = $validated['express_enabled'] ? 'เปิดใช้งาน' : 'ปิดการใช้งาน';
            
            return response()->json([
                'success' => true,
                'message' => $action . ' Express สำหรับ ' . $updatedCount . ' แผนกสำเร็จแล้ว'
            ]);

        } catch (\Exception $e) {
            \Log::error('Bulk Express update failed', [
                'department_ids' => $validated['department_ids'],
                'error' => $e->getMessage()
            ]);

            return response()->json([
                'success' => false,
                'message' => 'เกิดข้อผิดพลาดในการอัพเดต Express'
            ], 500);
        }
    }
}
