<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use App\Models\Branch;
use App\Models\Employee; // ✅ FIXED: ใช้ Employee แทน User
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;

class BranchController extends Controller
{
    public function __construct()
    {
        $this->middleware(['auth']);
        // Remove role middleware for testing
        // $this->middleware(['auth', 'role:super_admin,admin']);
    }

    /**
     * Display a listing of branches
     */
    public function index(Request $request)
    {
        $query = Branch::with(['manager', 'employees']);

        // Search functionality
        if ($request->has('search') && $request->search) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('name', 'LIKE', "%{$search}%")
                  ->orWhere('code', 'LIKE', "%{$search}%")
                  ->orWhere('address', 'LIKE', "%{$search}%");
            });
        }

        // Status filter
        if ($request->has('status') && $request->status !== '') {
            $query->where('is_active', $request->status);
        }

        $branches = $query->orderBy('name')->paginate(10);

        return view('branches.index', compact('branches'));
    }

    /**
     * Show the form for creating a new branch
     */
    public function create()
    {
        // ✅ FIXED: Get employees who can be managers (using Employee model)
        $availableManagers = Employee::whereNull('branch_id') // ✅ ใช้ branch_id แทน managed_branch_id
            ->where('status', 'active') // ✅ ใช้ status แทน is_active
            ->whereIn('role', ['manager', 'super_admin', 'it_admin']) // ✅ เฉพาะ role ที่เหมาะสม
            ->orderBy('first_name_th')
            ->orderBy('last_name_th')
            ->get();

        return view('branches.create', compact('availableManagers'));
    }

    /**
     * Store a newly created branch
     */
    public function store(Request $request)
    {
        Log::info('=== Branch Store Debug ===');
        Log::info('Request Data:', $request->all());

        try {
            // Validation
            $validated = $request->validate([
                'name' => 'required|string|max:255',
                'code' => 'required|string|max:10|unique:branches,code',
                'description' => 'nullable|string',
                'address' => 'nullable|string',
                'phone' => 'nullable|string|max:20',
                'email' => 'nullable|email|max:255',
                'manager_id' => 'nullable|exists:employees,id', // ✅ FIXED: ใช้ employees table
                'is_active' => 'nullable',
                'capacity' => 'nullable|integer|min:1|max:1000', // ✅ เพิ่ม capacity
                'area_sqm' => 'nullable|numeric|min:0|max:99999.99', // ✅ เพิ่ม area_sqm
                'opening_date' => 'nullable|date|before_or_equal:today', // ✅ เพิ่ม opening_date
            ]);

            Log::info('Validation Passed:', $validated);

            // Handle checkbox - if not checked, it won't be in request
            $validated['is_active'] = $request->has('is_active');

            // Create branch
            $branch = Branch::create($validated);

            Log::info('Branch Created:', $branch->toArray());

            // ✅ FIXED: Update manager's branch_id if manager is assigned
            if ($request->manager_id) {
                Employee::where('id', $request->manager_id)->update([
                    'branch_id' => $branch->id // ✅ ใช้ branch_id แทน managed_branch_id
                ]);
                Log::info('Manager Updated:', ['manager_id' => $request->manager_id, 'branch_id' => $branch->id]);
            }

            return redirect()->route('branches.index')
                ->with('success', 'สร้างสาขาใหม่เรียบร้อยแล้ว');

        } catch (\Illuminate\Validation\ValidationException $e) {
            Log::error('Validation Error:', $e->errors());
            return back()->withErrors($e->errors())->withInput();
        } catch (\Exception $e) {
            Log::error('Branch Store Error:', ['error' => $e->getMessage(), 'trace' => $e->getTraceAsString()]);
            return back()->withErrors(['error' => 'เกิดข้อผิดพลาด: ' . $e->getMessage()])->withInput();
        }
    }

    /**
     * Display the specified branch
     */
    public function show(Branch $branch)
    {
        $branch->load(['manager', 'employees']);
        
        // ✅ FIXED: Get branch statistics
        $statistics = [
            'total_employees' => $branch->employees()->count(),
            'active_employees' => $branch->employees()->where('status', 'active')->count(), // ✅ ใช้ status
            'departments' => $branch->employees()->with('department')->get()->pluck('department.name')->unique()->filter()->values(),
            'capacity_info' => $branch->getCapacityInfo(), // ✅ ใช้ method จาก Model
        ];

        return view('branches.show', compact('branch', 'statistics'));
    }

    /**
     * Show the form for editing the specified branch
     */
    public function edit(Branch $branch)
    {
        // ✅ FIXED: Get available managers (including current manager)
        $availableManagers = Employee::where(function($query) use ($branch) {
            $query->whereNull('branch_id') // ✅ ใช้ branch_id
                  ->orWhere('id', $branch->manager_id);
        })
        ->where('status', 'active') // ✅ ใช้ status
        ->whereIn('role', ['manager', 'super_admin', 'it_admin']) // ✅ เฉพาะ role ที่เหมาะสม
        ->orderBy('first_name_th')
        ->orderBy('last_name_th')
        ->get();

        return view('branches.edit', compact('branch', 'availableManagers'));
    }

    /**
     * Update the specified branch
     */
    public function update(Request $request, Branch $branch)
    {
        Log::info('=== Branch Update Debug ===');
        Log::info('Request Data:', $request->all());

        try {
            // Validation
            $validated = $request->validate([
                'name' => 'required|string|max:255',
                'code' => 'required|string|max:10|unique:branches,code,' . $branch->id,
                'description' => 'nullable|string',
                'address' => 'nullable|string',
                'phone' => 'nullable|string|max:20',
                'email' => 'nullable|email|max:255',
                'manager_id' => 'nullable|exists:employees,id', // ✅ FIXED
                'is_active' => 'nullable',
                'capacity' => 'nullable|integer|min:1|max:1000',
                'area_sqm' => 'nullable|numeric|min:0|max:99999.99',
                'opening_date' => 'nullable|date|before_or_equal:today',
            ]);

            // Handle checkbox
            $validated['is_active'] = $request->has('is_active');

            // ✅ FIXED: Remove branch_id from old manager
            if ($branch->manager_id && $branch->manager_id != $request->manager_id) {
                Employee::where('id', $branch->manager_id)->update([
                    'branch_id' => null // ✅ ใช้ branch_id
                ]);
            }

            // Update branch
            $branch->update($validated);

            // ✅ FIXED: Set branch_id for new manager
            if ($request->manager_id) {
                Employee::where('id', $request->manager_id)->update([
                    'branch_id' => $branch->id // ✅ ใช้ branch_id
                ]);
            }

            return redirect()->route('branches.index')
                ->with('success', 'อัพเดตข้อมูลสาขาเรียบร้อยแล้ว');

        } catch (\Exception $e) {
            Log::error('Branch Update Error:', ['error' => $e->getMessage()]);
            return back()->withErrors(['error' => 'เกิดข้อผิดพลาด: ' . $e->getMessage()])->withInput();
        }
    }

    /**
     * Remove the specified branch
     */
    public function destroy(Branch $branch)
    {
        try {
            // Check if branch has employees
            if ($branch->employees()->count() > 0) {
                return redirect()->route('branches.index')
                    ->with('error', 'ไม่สามารถลบสาขาที่มีพนักงานอยู่ได้');
            }

            // ✅ FIXED: Remove branch_id from manager
            if ($branch->manager_id) {
                Employee::where('id', $branch->manager_id)->update([
                    'branch_id' => null // ✅ ใช้ branch_id
                ]);
            }

            $branch->delete();

            return redirect()->route('branches.index')
                ->with('success', 'ลบสาขาเรียบร้อยแล้ว');

        } catch (\Exception $e) {
            Log::error('Branch Delete Error:', ['error' => $e->getMessage()]);
            return redirect()->route('branches.index')
                ->with('error', 'เกิดข้อผิดพลาดในการลบสาขา: ' . $e->getMessage());
        }
    }

    /**
     * Toggle branch active status
     */
    public function toggleStatus(Branch $branch)
    {
        try {
            $branch->update(['is_active' => !$branch->is_active]);
            
            $status = $branch->is_active ? 'เปิดใช้งาน' : 'ปิดใช้งาน';
            
            return redirect()->back()
                ->with('success', "เปลี่ยนสถานะสาขาเป็น {$status} เรียบร้อยแล้ว");

        } catch (\Exception $e) {
            Log::error('Branch Toggle Status Error:', ['error' => $e->getMessage()]);
            return redirect()->back()
                ->with('error', 'เกิดข้อผิดพลาดในการเปลี่ยนสถานะ');
        }
    }

    /**
     * Get branch data for AJAX
     */
    public function getData(Request $request)
    {
        $query = Branch::with(['manager', 'employees']);

        if ($request->has('search') && $request->search) {
            $search = $request->search;
            $query->where(function($q) use ($search) {
                $q->where('name', 'LIKE', "%{$search}%")
                  ->orWhere('code', 'LIKE', "%{$search}%");
            });
        }

        $branches = $query->get();

        return response()->json([
            'success' => true,
            'data' => $branches
        ]);
    }

    // ========================================
    // ✅ NEW: EXPORT METHODS - แก้ไข Route ที่หายไป
    // ========================================

    /**
     * ✅ NEW: Export branches to Excel (Default export route)
     */
    public function exportExcel(Request $request)
    {
        $user = Auth::user();
        
        // Check permissions
        if (!$this->canExportBranches($user)) {
            return redirect()->route('branches.index')
                ->with('error', 'ไม่มีสิทธิ์ส่งออกข้อมูลสาขา');
        }

        try {
            $query = Branch::with(['manager', 'employees']);
            
            // Apply filters if provided
            if ($request->filled('status')) {
                $query->where('is_active', $request->status);
            }
            
            if ($request->filled('search')) {
                $search = $request->search;
                $query->where(function($q) use ($search) {
                    $q->where('name', 'LIKE', "%{$search}%")
                      ->orWhere('code', 'LIKE', "%{$search}%")
                      ->orWhere('address', 'LIKE', "%{$search}%");
                });
            }
            
            $branches = $query->get();
            
            // Format data for export
            $data = $branches->map(function ($branch) {
                return [
                    'รหัสสาขา' => $branch->code,
                    'ชื่อสาขา' => $branch->name,
                    'ที่อยู่' => $branch->address ?? '-',
                    'เบอร์โทร' => $branch->phone ?? '-',
                    'อีเมล' => $branch->email ?? '-',
                    'จำนวนพนักงาน' => $branch->employees->count(),
                    'จำนวนสูงสุด' => $branch->capacity ?? '-',
                    'ใช้กำลังการผลิต' => $branch->capacity ? $branch->capacity_usage . '%' : '-',
                    'ผู้จัดการ' => $branch->manager_name,
                    'สถานะ' => $branch->status_display,
                    'พื้นที่' => $branch->formatted_area,
                    'คำอธิบาย' => $branch->description ?? '-',
                    'วันที่เปิด' => $branch->opening_date ? $branch->opening_date->format('d/m/Y') : '-',
                    'วันที่สร้าง' => $branch->created_at->format('d/m/Y H:i'),
                ];
            });

            Log::info('🏢 Branch Export Excel', [
                'exported_by' => $user->id,
                'exported_by_name' => $user->full_name_th ?? $user->name,
                'total_records' => $data->count(),
                'filters' => $request->only(['status', 'search'])
            ]);

            // For now, return JSON. In a real implementation, you'd use Laravel Excel
            return response()->json([
                'success' => true,
                'message' => 'ข้อมูลสาขาสำหรับส่งออก Excel',
                'data' => $data,
                'total' => $data->count(),
                'export_url' => 'data:application/json;charset=utf-8,' . urlencode(json_encode($data, JSON_UNESCAPED_UNICODE))
            ]);

        } catch (\Exception $e) {
            Log::error('Branch export Excel failed: ' . $e->getMessage());
            return back()->with('error', 'เกิดข้อผิดพลาดในการส่งออกข้อมูล Excel: ' . $e->getMessage());
        }
    }

    /**
     * ✅ NEW: Export branches to PDF
     */
    public function exportPdf(Request $request)
    {
        $user = Auth::user();
        
        if (!$this->canExportBranches($user)) {
            return redirect()->route('branches.index')
                ->with('error', 'ไม่มีสิทธิ์ส่งออกข้อมูลสาขา');
        }

        try {
            $branches = Branch::with(['manager', 'employees'])->get();
            
            Log::info('🏢 Branch Export PDF', [
                'exported_by' => $user->id,
                'total_records' => $branches->count()
            ]);

            // TODO: Implement PDF export using DomPDF or similar
            return back()->with('info', 'การส่งออก PDF กำลังพัฒนา - ใช้ Excel ชั่วคราว');

        } catch (\Exception $e) {
            Log::error('Branch export PDF failed: ' . $e->getMessage());
            return back()->with('error', 'เกิดข้อผิดพลาดในการส่งออกข้อมูล PDF');
        }
    }

    /**
     * ✅ NEW: Export branches to CSV
     */
    public function exportCsv(Request $request)
    {
        $user = Auth::user();
        
        if (!$this->canExportBranches($user)) {
            return redirect()->route('branches.index')
                ->with('error', 'ไม่มีสิทธิ์ส่งออกข้อมูลสาขา');
        }

        try {
            $branches = Branch::with(['manager', 'employees'])->get();
            
            $filename = 'branches_export_' . now()->format('Y-m-d_H-i-s') . '.csv';
            
            $headers = [
                'Content-Type' => 'text/csv; charset=UTF-8',
                'Content-Disposition' => "attachment; filename=\"{$filename}\"",
            ];

            Log::info('🏢 Branch Export CSV', [
                'exported_by' => $user->id,
                'filename' => $filename,
                'total_records' => $branches->count()
            ]);

            $callback = function() use ($branches) {
                $file = fopen('php://output', 'w');
                
                // Add BOM for UTF-8
                fprintf($file, chr(0xEF).chr(0xBB).chr(0xBF));
                
                // CSV Header
                fputcsv($file, [
                    'รหัสสาขา',
                    'ชื่อสาขา', 
                    'ที่อยู่',
                    'เบอร์โทร',
                    'อีเมล',
                    'จำนวนพนักงาน',
                    'จำนวนสูงสุด',
                    'ใช้กำลังการผลิต(%)',
                    'ผู้จัดการ',
                    'สถานะ',
                    'พื้นที่',
                    'คำอธิบาย',
                    'วันที่เปิด',
                    'วันที่สร้าง'
                ]);

                // CSV Data
                foreach ($branches as $branch) {
                    fputcsv($file, [
                        $branch->code,
                        $branch->name,
                        $branch->address ?? '',
                        $branch->phone ?? '',
                        $branch->email ?? '',
                        $branch->employees->count(),
                        $branch->capacity ?? '',
                        $branch->capacity ? $branch->capacity_usage : '',
                        $branch->manager_name,
                        $branch->status_display,
                        $branch->area_sqm ?? '',
                        $branch->description ?? '',
                        $branch->opening_date ? $branch->opening_date->format('d/m/Y') : '',
                        $branch->created_at->format('d/m/Y H:i')
                    ]);
                }

                fclose($file);
            };

            return response()->stream($callback, 200, $headers);

        } catch (\Exception $e) {
            Log::error('Branch export CSV failed: ' . $e->getMessage());
            return back()->with('error', 'เกิดข้อผิดพลาดในการส่งออกข้อมูล CSV');
        }
    }

    // ========================================
    // ✅ PERMISSION HELPER METHODS
    // ========================================

    /**
     * Check if user can export branches
     */
    private function canExportBranches($user): bool
    {
        return in_array($user->role, ['super_admin', 'it_admin', 'hr']);
    }

    /**
     * Check if user can view branches
     */
    private function canViewBranches($user): bool
    {
        return in_array($user->role, ['super_admin', 'it_admin', 'hr', 'manager']);
    }

    /**
     * Check if user can create branches
     */
    private function canCreateBranches($user): bool
    {
        return in_array($user->role, ['super_admin', 'it_admin', 'hr']);
    }

    /**
     * Check if user can edit branches
     */
    private function canEditBranches($user): bool
    {
        return in_array($user->role, ['super_admin', 'it_admin', 'hr']);
    }

    /**
     * Check if user can delete branches
     */
    private function canDeleteBranches($user): bool
    {
        return in_array($user->role, ['super_admin', 'it_admin']);
    }
}
