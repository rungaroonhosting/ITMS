<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        echo "üöÄ Starting SUPER SAFE Express Username v2.0 Migration...\n";
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if (!Schema::hasTable('employees')) {
            echo "‚ùå Table 'employees' not found. Please create employees table first.\n";
            return;
        }
        
        echo "‚úÖ Table 'employees' found, proceeding...\n";
        
        // ‚úÖ 1. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ express_username column ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        $this->handleExpressUsernameColumn();
        
        // ‚úÖ 2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ express_password column ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢  
        $this->handleExpressPasswordColumn();
        
        // ‚úÖ 3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ columns ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        $this->handleOptionalColumns();
        
        // ‚úÖ 4. ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Express
        $this->cleanExpressData();
        
        // ‚úÖ 5. ‡πÄ‡∏û‡∏¥‡πà‡∏° indexes ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        $this->addSafeIndexes();
        
        echo "üéâ SUPER SAFE Migration completed successfully!\n";
        echo "‚ö° Express v2.0: Username 1-7 chars, Password 4 unique digits\n";
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        echo "üîÑ Rolling back SUPER SAFE Migration...\n";
        
        try {
            if (Schema::hasTable('employees')) {
                DB::table('employees')->update([
                    'express_username' => null,
                    'express_password' => null
                ]);
                echo "‚úÖ Express data cleared\n";
            }
        } catch (\Exception $e) {
            echo "‚ö†Ô∏è Rollback warning: " . $e->getMessage() . "\n";
        }
        
        echo "üîÑ Safe rollback completed\n";
    }
    
    /**
     * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ express_username column ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
     */
    private function handleExpressUsernameColumn(): void
    {
        try {
            echo "üîç Checking express_username column...\n";
            
            $hasColumn = false;
            try {
                $hasColumn = Schema::hasColumn('employees', 'express_username');
            } catch (\Exception $e) {
                echo "‚ö†Ô∏è Error checking express_username column: " . $e->getMessage() . "\n";
                $hasColumn = false;
            }
            
            if ($hasColumn) {
                // Column ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
                try {
                    Schema::table('employees', function (Blueprint $table) {
                        $table->string('express_username', 7)->nullable()->change();
                    });
                    echo "‚úÖ Express username column updated to 7 chars\n";
                } catch (\Exception $e) {
                    echo "‚ö†Ô∏è Could not update express_username: " . $e->getMessage() . "\n";
                }
            } else {
                // Column ‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
                try {
                    Schema::table('employees', function (Blueprint $table) {
                        $table->string('express_username', 7)->nullable();
                    });
                    echo "‚úÖ Express username column created\n";
                } catch (\Exception $e) {
                    echo "‚ö†Ô∏è Could not create express_username: " . $e->getMessage() . "\n";
                }
            }
            
        } catch (\Exception $e) {
            echo "‚ö†Ô∏è Express username handling error: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ express_password column ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
     */
    private function handleExpressPasswordColumn(): void
    {
        try {
            echo "üîç Checking express_password column...\n";
            
            $hasColumn = false;
            try {
                $hasColumn = Schema::hasColumn('employees', 'express_password');
            } catch (\Exception $e) {
                echo "‚ö†Ô∏è Error checking express_password column: " . $e->getMessage() . "\n";
                $hasColumn = false;
            }
            
            if ($hasColumn) {
                // Column ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß
                try {
                    Schema::table('employees', function (Blueprint $table) {
                        $table->string('express_password', 4)->nullable()->change();
                    });
                    echo "‚úÖ Express password column updated to 4 chars\n";
                } catch (\Exception $e) {
                    echo "‚ö†Ô∏è Could not update express_password: " . $e->getMessage() . "\n";
                }
            } else {
                // Column ‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
                try {
                    Schema::table('employees', function (Blueprint $table) {
                        $table->string('express_password', 4)->nullable();
                    });
                    echo "‚úÖ Express password column created\n";
                } catch (\Exception $e) {
                    echo "‚ö†Ô∏è Could not create express_password: " . $e->getMessage() . "\n";
                }
            }
            
        } catch (\Exception $e) {
            echo "‚ö†Ô∏è Express password handling error: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ columns ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ (hire_date, salary)
     */
    private function handleOptionalColumns(): void
    {
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ hire_date
        try {
            echo "üîç Checking hire_date column...\n";
            
            $hasHireDate = false;
            try {
                $hasHireDate = Schema::hasColumn('employees', 'hire_date');
            } catch (\Exception $e) {
                $hasHireDate = false;
            }
            
            if (!$hasHireDate) {
                try {
                    Schema::table('employees', function (Blueprint $table) {
                        $table->date('hire_date')->nullable();
                    });
                    echo "‚úÖ Hire date column created\n";
                } catch (\Exception $e) {
                    echo "‚ö†Ô∏è Could not create hire_date: " . $e->getMessage() . "\n";
                }
            } else {
                echo "‚ÑπÔ∏è Hire date column already exists, skipping...\n";
            }
            
        } catch (\Exception $e) {
            echo "‚ö†Ô∏è Hire date handling error: " . $e->getMessage() . "\n";
        }
        
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ salary
        try {
            echo "üîç Checking salary column...\n";
            
            $hasSalary = false;
            try {
                $hasSalary = Schema::hasColumn('employees', 'salary');
            } catch (\Exception $e) {
                $hasSalary = false;
            }
            
            if (!$hasSalary) {
                try {
                    Schema::table('employees', function (Blueprint $table) {
                        $table->decimal('salary', 10, 2)->nullable();
                    });
                    echo "‚úÖ Salary column created\n";
                } catch (\Exception $e) {
                    echo "‚ö†Ô∏è Could not create salary: " . $e->getMessage() . "\n";
                }
            } else {
                echo "‚ÑπÔ∏è Salary column already exists, skipping...\n";
            }
            
        } catch (\Exception $e) {
            echo "‚ö†Ô∏è Salary handling error: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Express ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
     */
    private function cleanExpressData(): void
    {
        try {
            echo "üßπ Cleaning Express data...\n";
            
            if (!Schema::hasTable('employees')) {
                echo "‚ÑπÔ∏è Employees table not found, skipping data cleaning\n";
                return;
            }
            
            // ‡∏•‡πâ‡∏≤‡∏á Express username ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            $fixed = 0;
            try {
                $invalidUsernames = DB::select("
                    SELECT id, express_username, first_name_en, last_name_en 
                    FROM employees 
                    WHERE express_username IS NOT NULL 
                    AND (
                        CHAR_LENGTH(express_username) > 7 OR 
                        CHAR_LENGTH(express_username) < 1 OR 
                        express_username REGEXP '[^a-zA-Z0-9]'
                    )
                    LIMIT 50
                ");

                foreach ($invalidUsernames as $employee) {
                    $newUsername = $this->generateValidExpressUsername($employee->first_name_en ?? '', $employee->last_name_en ?? '');
                    
                    DB::table('employees')
                        ->where('id', $employee->id)
                        ->update(['express_username' => $newUsername]);
                    
                    $fixed++;
                }
                
                if ($fixed > 0) {
                    echo "‚úÖ Fixed {$fixed} invalid Express usernames\n";
                }
                
            } catch (\Exception $e) {
                echo "‚ö†Ô∏è Express username cleaning warning: " . $e->getMessage() . "\n";
            }
            
            // ‡∏•‡πâ‡∏≤‡∏á Express password ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
            $fixed = 0;
            try {
                $invalidPasswords = DB::select("
                    SELECT id, express_password 
                    FROM employees 
                    WHERE express_password IS NOT NULL 
                    AND (
                        CHAR_LENGTH(express_password) != 4 OR 
                        express_password NOT REGEXP '^[0-9]{4}$'
                    )
                    LIMIT 50
                ");

                foreach ($invalidPasswords as $employee) {
                    $newPassword = $this->generateValidExpressPassword();
                    
                    DB::table('employees')
                        ->where('id', $employee->id)
                        ->update(['express_password' => $newPassword]);
                    
                    $fixed++;
                }
                
                if ($fixed > 0) {
                    echo "‚úÖ Fixed {$fixed} invalid Express passwords\n";
                }
                
            } catch (\Exception $e) {
                echo "‚ö†Ô∏è Express password cleaning warning: " . $e->getMessage() . "\n";
            }
            
            echo "‚úÖ Express data cleaning completed\n";
            
        } catch (\Exception $e) {
            echo "‚ö†Ô∏è Express data cleaning error: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * ‡πÄ‡∏û‡∏¥‡πà‡∏° indexes ‡πÅ‡∏ö‡∏ö‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
     */
    private function addSafeIndexes(): void
    {
        try {
            echo "üîç Adding safe indexes...\n";
            
            if (!Schema::hasTable('employees')) {
                echo "‚ÑπÔ∏è Employees table not found, skipping index creation\n";
                return;
            }
            
            $indexesToAdd = [
                'express_username' => 'idx_employees_express_username',
                'express_password' => 'idx_employees_express_password',
            ];
            
            foreach ($indexesToAdd as $column => $indexName) {
                try {
                    if (Schema::hasColumn('employees', $column)) {
                        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ index ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        $indexes = DB::select("SHOW INDEX FROM employees WHERE Key_name = ?", [$indexName]);
                        
                        if (empty($indexes)) {
                            Schema::table('employees', function (Blueprint $table) use ($column, $indexName) {
                                $table->index($column, $indexName);
                            });
                            echo "‚úÖ Index {$indexName} added for {$column}\n";
                        } else {
                            echo "‚ÑπÔ∏è Index {$indexName} already exists\n";
                        }
                    }
                } catch (\Exception $e) {
                    echo "‚ö†Ô∏è Could not add index {$indexName}: " . $e->getMessage() . "\n";
                }
            }
            
        } catch (\Exception $e) {
            echo "‚ö†Ô∏è Index creation warning: " . $e->getMessage() . "\n";
        }
    }
    
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Express username ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (1-7 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£)
     */
    private function generateValidExpressUsername($firstName, $lastName): string
    {
        // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠
        $firstName = preg_replace('/[^a-zA-Z0-9]/', '', $firstName ?? '');
        $lastName = preg_replace('/[^a-zA-Z0-9]/', '', $lastName ?? '');
        
        if (empty($firstName)) {
            $firstName = 'user';
        }
        
        // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 7 ‡∏ï‡∏±‡∏ß
        $fullName = strtolower($firstName);
        if (strlen($fullName) >= 1 && strlen($fullName) <= 7) {
            if (!$this->isExpressUsernameExists($fullName)) {
                return $fullName;
            }
        }
        
        // ‡∏ï‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 7 ‡∏ï‡∏±‡∏ß
        if (strlen($fullName) > 7) {
            $fullName = substr($fullName, 0, 7);
            if (!$this->isExpressUsernameExists($fullName)) {
                return $fullName;
            }
        }
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
        $baseUsername = substr(strtolower($firstName), 0, 6);
        for ($i = 1; $i <= 9; $i++) {
            $username = $baseUsername . $i;
            if (strlen($username) <= 7 && !$this->isExpressUsernameExists($username)) {
                return $username;
            }
        }
        
        // ‡∏™‡∏∏‡πà‡∏°
        do {
            $username = 'emp' . random_int(100, 999);
        } while ($this->isExpressUsernameExists($username) && $username !== '');
        
        return $username;
    }
    
    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á Express password ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (4 ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥)
     */
    private function generateValidExpressPassword(): string
    {
        $attempts = 0;
        do {
            $digits = [];
            while (count($digits) < 4) {
                $digit = random_int(0, 9);
                if (!in_array($digit, $digits)) {
                    $digits[] = $digit;
                }
            }
            $password = implode('', $digits);
            $attempts++;
        } while ($this->isExpressPasswordExists($password) && $attempts < 100);
        
        return $password;
    }
    
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Express username ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     */
    private function isExpressUsernameExists($username): bool
    {
        try {
            if (!Schema::hasTable('employees') || empty($username)) {
                return false;
            }
            
            return DB::table('employees')
                ->where('express_username', $username)
                ->whereNull('deleted_at')
                ->exists();
        } catch (\Exception $e) {
            return false;
        }
    }
    
    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Express password ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     */
    private function isExpressPasswordExists($password): bool
    {
        try {
            if (!Schema::hasTable('employees') || empty($password)) {
                return false;
            }
            
            return DB::table('employees')
                ->where('express_password', $password)
                ->whereNull('deleted_at')
                ->exists();
        } catch (\Exception $e) {
            return false;
        }
    }
};
