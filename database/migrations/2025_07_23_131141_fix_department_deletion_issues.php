<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        // 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° soft delete ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        Schema::table('departments', function (Blueprint $table) {
            if (!Schema::hasColumn('departments', 'deleted_at')) {
                $table->softDeletes();
            }
        });

        // 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        Schema::table('departments', function (Blueprint $table) {
            if (!Schema::hasColumn('departments', 'code')) {
                $table->string('code', 10)->after('name')->nullable();
            }
            
            if (!Schema::hasColumn('departments', 'description')) {
                $table->text('description')->nullable()->after('code');
            }
            
            if (!Schema::hasColumn('departments', 'is_active')) {
                $table->boolean('is_active')->default(true)->after('description');
            }
            
            if (!Schema::hasColumn('departments', 'express_enabled')) {
                $table->boolean('express_enabled')->default(false)->after('is_active');
            }
            
            if (!Schema::hasColumn('departments', 'express_enabled_at')) {
                $table->timestamp('express_enabled_at')->nullable()->after('express_enabled');
            }
        });

        // 3. ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• duplicate ‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        $this->cleanupDepartmentData();

        // 4. ‡πÄ‡∏û‡∏¥‡πà‡∏° unique constraints ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö soft delete
        $this->addUniqueConstraints();

        // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• code ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        $this->generateMissingCodes();

        echo "‚úÖ Department deletion fix migration completed successfully!\n";
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        // ‡∏•‡∏ö unique constraints
        Schema::table('departments', function (Blueprint $table) {
            try {
                $table->dropUnique(['name', 'deleted_at']);
                $table->dropUnique(['code', 'deleted_at']);
            } catch (\Exception $e) {
                // Ignore if constraints don't exist
            }
        });

        // ‡πÑ‡∏°‡πà‡∏•‡∏ö columns ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        echo "‚ö†Ô∏è Migration rollback completed (columns kept for data safety)\n";
    }

    /**
     * ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà duplicate ‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤
     */
    private function cleanupDepartmentData(): void
    {
        try {
            echo "üßπ Cleaning up department data...\n";

            // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• null values
            DB::table('departments')->whereNull('name')->delete();
            DB::update("UPDATE departments SET code = UPPER(LEFT(name, 3)) WHERE code IS NULL OR code = ''");
            DB::update("UPDATE departments SET is_active = 1 WHERE is_active IS NULL");
            DB::update("UPDATE departments SET express_enabled = 0 WHERE express_enabled IS NULL");

            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
            $duplicateNames = DB::table('departments')
                ->select('name', DB::raw('COUNT(*) as count'))
                ->whereNull('deleted_at')
                ->groupBy('name')
                ->havingRaw('COUNT(*) > 1')
                ->get();

            foreach ($duplicateNames as $duplicate) {
                echo "üîç Found duplicate name: {$duplicate->name} ({$duplicate->count} records)\n";
                
                $departments = DB::table('departments')
                    ->where('name', $duplicate->name)
                    ->whereNull('deleted_at')
                    ->orderBy('created_at', 'desc')
                    ->get();

                // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡πÅ‡∏£‡∏Å (‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î) ‡∏•‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                $keep = $departments->first();
                $toDelete = $departments->skip(1);

                foreach ($toDelete as $dept) {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏´‡∏°
                    $hasEmployees = DB::table('employees')
                        ->where('department_id', $dept->id)
                        ->exists();

                    if ($hasEmployees) {
                        // ‡∏¢‡πâ‡∏≤‡∏¢‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
                        DB::table('employees')
                            ->where('department_id', $dept->id)
                            ->update(['department_id' => $keep->id]);
                        
                        echo "üë• Moved employees from duplicate department ID {$dept->id} to {$keep->id}\n";
                    }

                    // Soft delete ‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥
                    DB::table('departments')
                        ->where('id', $dept->id)
                        ->update(['deleted_at' => now()]);
                    
                    echo "üóëÔ∏è Soft deleted duplicate department: {$dept->name} (ID: {$dept->id})\n";
                }
            }

            // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥
            $duplicateCodes = DB::table('departments')
                ->select('code', DB::raw('COUNT(*) as count'))
                ->whereNull('deleted_at')
                ->whereNotNull('code')
                ->groupBy('code')
                ->havingRaw('COUNT(*) > 1')
                ->get();

            foreach ($duplicateCodes as $duplicate) {
                echo "üîç Found duplicate code: {$duplicate->code} ({$duplicate->count} records)\n";
                
                $departments = DB::table('departments')
                    ->where('code', $duplicate->code)
                    ->whereNull('deleted_at')
                    ->orderBy('created_at', 'asc')
                    ->get();

                // ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡πÅ‡∏£‡∏Å ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                $counter = 1;
                foreach ($departments->skip(1) as $dept) {
                    $newCode = $duplicate->code . $counter;
                    
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
                    while (DB::table('departments')
                           ->where('code', $newCode)
                           ->whereNull('deleted_at')
                           ->exists()) {
                        $counter++;
                        $newCode = $duplicate->code . $counter;
                    }
                    
                    DB::table('departments')
                        ->where('id', $dept->id)
                        ->update(['code' => $newCode]);
                    
                    echo "üîÑ Updated duplicate code for department ID {$dept->id}: {$duplicate->code} ‚Üí {$newCode}\n";
                    $counter++;
                }
            }

            echo "‚úÖ Department data cleanup completed\n";

        } catch (\Exception $e) {
            echo "‚ö†Ô∏è Cleanup warning: " . $e->getMessage() . "\n";
            \Log::warning('Department cleanup error: ' . $e->getMessage());
        }
    }

    /**
     * ‡πÄ‡∏û‡∏¥‡πà‡∏° unique constraints ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö soft delete
     */
    private function addUniqueConstraints(): void
    {
        try {
            echo "üîí Adding unique constraints...\n";

            // ‡∏•‡∏ö unique constraints ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            Schema::table('departments', function (Blueprint $table) {
                try {
                    $table->dropUnique(['name']);
                } catch (\Exception $e) {
                    // Ignore if doesn't exist
                }
                
                try {
                    $table->dropUnique(['code']);
                } catch (\Exception $e) {
                    // Ignore if doesn't exist
                }
            });

            // ‡πÄ‡∏û‡∏¥‡πà‡∏° composite unique constraints ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö soft delete
            DB::statement('CREATE UNIQUE INDEX departments_name_unique_not_deleted ON departments (name) WHERE deleted_at IS NULL');
            DB::statement('CREATE UNIQUE INDEX departments_code_unique_not_deleted ON departments (code) WHERE deleted_at IS NULL');

            echo "‚úÖ Unique constraints added\n";

        } catch (\Exception $e) {
            echo "‚ö†Ô∏è Constraint warning: " . $e->getMessage() . "\n";
            \Log::warning('Failed to add unique constraints: ' . $e->getMessage());
        }
    }

    /**
     * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏ú‡∏ô‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ
     */
    private function generateMissingCodes(): void
    {
        try {
            echo "üè∑Ô∏è Generating missing department codes...\n";

            $departmentsWithoutCode = DB::table('departments')
                ->whereNull('deleted_at')
                ->where(function($query) {
                    $query->whereNull('code')
                          ->orWhere('code', '');
                })
                ->get();

            foreach ($departmentsWithoutCode as $dept) {
                $name = $dept->name;
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏´‡∏±‡∏™‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡∏ô‡∏Å
                $code = strtoupper(substr($name, 0, 3));
                $code = preg_replace('/[^A-Z0-9]/', '', $code);
                
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
                $originalCode = $code;
                $counter = 1;
                
                while (DB::table('departments')
                       ->where('code', $code)
                       ->whereNull('deleted_at')
                       ->where('id', '!=', $dept->id)
                       ->exists()) {
                    $code = $originalCode . $counter;
                    $counter++;
                }

                DB::table('departments')
                    ->where('id', $dept->id)
                    ->update(['code' => $code]);

                echo "üè∑Ô∏è Generated code for '{$name}': {$code}\n";
            }

            echo "‚úÖ Missing codes generated\n";

        } catch (\Exception $e) {
            echo "‚ö†Ô∏è Code generation warning: " . $e->getMessage() . "\n";
            \Log::warning('Failed to generate codes: ' . $e->getMessage());
        }
    }
};
