<?php

use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use App\Http\Controllers\EmployeeController;
use App\Http\Controllers\DepartmentController;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
*/

// Redirect root to appropriate page
Route::get('/', function () {
    if (Auth::check()) {
        return redirect()->route('dashboard');
    }
    return redirect()->route('login');
});

/*
|--------------------------------------------------------------------------
| Authentication Routes
|--------------------------------------------------------------------------
*/

// Login routes
Route::middleware('guest')->group(function () {
    Route::get('/login', function () {
        return view('auth.login');
    })->name('login');
    
    Route::post('/login', function (Illuminate\Http\Request $request) {
        $credentials = $request->validate([
            'email' => 'required|email',
            'password' => 'required'
        ]);

        if (Auth::attempt($credentials, $request->boolean('remember'))) {
            $request->session()->regenerate();
            
            return redirect()->intended(route('dashboard'))->with('success', 'เข้าสู่ระบบสำเร็จ');
        }

        return back()->withErrors([
            'email' => 'ข้อมูลการเข้าสู่ระบบไม่ถูกต้อง',
        ])->onlyInput('email');
    })->name('login.store');
});

// Logout routes
Route::post('/logout', function (Illuminate\Http\Request $request) {
    Auth::logout();
    $request->session()->invalidate();
    $request->session()->regenerateToken();
    
    return redirect()->route('login')->with('success', 'ออกจากระบบเรียบร้อยแล้ว');
})->name('logout');

/*
|--------------------------------------------------------------------------
| Protected Routes (ต้อง login ก่อน)
|--------------------------------------------------------------------------
*/

Route::middleware('auth')->group(function () {
    
    /*
    |--------------------------------------------------------------------------
    | Dashboard
    |--------------------------------------------------------------------------
    */
    
    Route::get('/dashboard', function () {
        try {
            $employees = \App\Models\Employee::withoutTrashed()->get();
            $trashCount = \App\Models\Employee::onlyTrashed()->count();
            
            // Express Statistics
            $expressUsers = \App\Models\Employee::whereNotNull('express_username')->count();
            $expressEnabledDepartments = \App\Models\Department::where('express_enabled', true)->count();
            $accountingEmployees = \App\Models\Employee::whereHas('department', function($query) {
                $query->where('express_enabled', true);
            })->count();
            
            return view('dashboard', compact('employees', 'trashCount', 'expressUsers', 'expressEnabledDepartments', 'accountingEmployees'));
        } catch (\Exception $e) {
            // Fallback if database is not ready
            return view('dashboard', [
                'employees' => collect(),
                'trashCount' => 0,
                'expressUsers' => 0,
                'expressEnabledDepartments' => 0,
                'accountingEmployees' => 0
            ]);
        }
    })->name('dashboard');
    
    /*
    |--------------------------------------------------------------------------
    | Department Management Routes
    |--------------------------------------------------------------------------
    */
    
    // Department CRUD Routes
    Route::resource('departments', DepartmentController::class);
    
    // Department Special Routes (Admin Only) - Updated Routes
    Route::middleware(['role:super_admin,it_admin'])->group(function () {
        // Original routes
        Route::post('/departments/{department}/toggle-status', [DepartmentController::class, 'toggleStatus'])
            ->name('departments.toggleStatus');
        Route::post('/departments/bulk-action', [DepartmentController::class, 'bulkAction'])
            ->name('departments.bulkAction');
        Route::get('/departments/export-excel', [DepartmentController::class, 'exportExcel'])
            ->name('departments.exportExcel');
        Route::get('/departments/{department}/express-users', [DepartmentController::class, 'getExpressUsers'])
            ->name('departments.expressUsers');
        
        // Updated Express routes
        Route::patch('/departments/{department}/toggle-express', [DepartmentController::class, 'toggleExpress'])
            ->name('departments.toggleExpress');
        Route::get('/departments/express-statistics', [DepartmentController::class, 'getExpressStats'])
            ->name('departments.expressStatistics');
        Route::patch('/departments/bulk/express', [DepartmentController::class, 'bulkUpdateExpress'])
            ->name('departments.bulkExpress');
    });
    
    /*
    |--------------------------------------------------------------------------
    | Employee Management Routes
    |--------------------------------------------------------------------------
    */
    
    // Employee Special Routes (before resource routes)
    Route::get('/employees/export-excel', [EmployeeController::class, 'exportExcel'])->name('employees.exportExcel');
    Route::get('/employees/export-pdf', [EmployeeController::class, 'exportPdf'])->name('employees.exportPdf');
    Route::post('/employees/bulk-action', [EmployeeController::class, 'bulkAction'])->name('employees.bulkAction');
    Route::get('/employees/search', [EmployeeController::class, 'search'])->name('employees.search');    
    
    // Trash Management Routes (SuperAdmin Only)
    Route::middleware(['role:super_admin'])->group(function () {
        Route::get('/employees/trash', [EmployeeController::class, 'trash'])->name('employees.trash');
        Route::post('/employees/{id}/restore', [EmployeeController::class, 'restore'])->name('employees.restore');
        Route::delete('/employees/{id}/force-delete', [EmployeeController::class, 'forceDelete'])->name('employees.force-delete');
        Route::post('/employees/bulk-restore', [EmployeeController::class, 'bulkRestore'])->name('employees.bulk-restore');
        Route::delete('/employees/empty-trash', [EmployeeController::class, 'emptyTrash'])->name('employees.empty-trash');
    });
    
    // Employee Action Routes
    Route::post('/employees/{employee}/reset-password', [EmployeeController::class, 'resetPassword'])->name('employees.reset-password');
    Route::post('/employees/{employee}/send-credentials', [EmployeeController::class, 'sendCredentials'])->name('employees.send-credentials');
    Route::get('/employees/{employee}/preview', [EmployeeController::class, 'preview'])->name('employees.preview');
    Route::post('/employees/{employee}/generate-credentials', [EmployeeController::class, 'generateCredentials'])->name('employees.generate-credentials');
    
    // Employee CRUD routes
    Route::resource('employees', EmployeeController::class);
    
    /*
    |--------------------------------------------------------------------------
    | Profile Management
    |--------------------------------------------------------------------------
    */
    
    Route::get('/profile', function () {
        return view('profile', ['user' => auth()->user()]);
    })->name('profile');
    
    Route::put('/profile', function (Illuminate\Http\Request $request) {
        $user = auth()->user();
        
        $validated = $request->validate([
            'first_name_th' => 'required|string|max:100',
            'last_name_th' => 'required|string|max:100',
            'first_name_en' => 'required|string|max:100',
            'last_name_en' => 'required|string|max:100',
            'phone' => 'required|string|max:20',
            'nickname' => 'nullable|string|max:50',
        ]);
        
        $user->update($validated);
        
        return back()->with('success', 'อัปเดตข้อมูลส่วนตัวเรียบร้อยแล้ว');
    })->name('profile.update');
    
    Route::put('/profile/password', function (Illuminate\Http\Request $request) {
        $request->validate([
            'current_password' => 'required',
            'password' => 'required|confirmed|min:6',
        ]);
        
        $user = auth()->user();
        
        if (!Hash::check($request->current_password, $user->password)) {
            return back()->withErrors(['current_password' => 'รหัสผ่านปัจจุบันไม่ถูกต้อง']);
        }
        
        $user->update([
            'password' => Hash::make($request->password)
        ]);
        
        return back()->with('success', 'เปลี่ยนรหัสผ่านเรียบร้อยแล้ว');
    })->name('profile.password.update');
    
});

/*
|--------------------------------------------------------------------------
| API Routes สำหรับ AJAX และ Express Generation
|--------------------------------------------------------------------------
*/

Route::prefix('api')->middleware('auth')->group(function () {
    
    // Employee API
    Route::get('/employees', [EmployeeController::class, 'apiIndex'])->name('api.employees.index');
    Route::get('/employees/search', [EmployeeController::class, 'apiSearch'])->name('api.employees.search');
    Route::get('/employees/{employee}', [EmployeeController::class, 'apiShow'])->name('api.employees.show');
    
    // Express credential generation API
    Route::get('/generate/express-username', [EmployeeController::class, 'generateExpressUsernameApi'])
        ->name('api.generate.express-username');
    
    Route::get('/generate/express-password', [EmployeeController::class, 'generateExpressPasswordApi'])
        ->name('api.generate.express-password');
    
    // ✅ Express eligibility check (Updated to use department express_enabled)
    Route::get('/check-express-eligibility', [EmployeeController::class, 'checkExpressEligibility'])
        ->name('api.check-express-eligibility');
    
    // Express connection test
    Route::post('/test-express-connection', [EmployeeController::class, 'testExpressConnection'])
        ->name('api.test-express-connection');
    
    // Express credentials retrieval
    Route::get('/employees/{employee}/express-credentials', [EmployeeController::class, 'getExpressCredentials'])
        ->name('api.employees.express-credentials');
    
    // Express usage report
    Route::get('/express-report', [EmployeeController::class, 'getExpressReport'])
        ->name('api.express-report');
    
    // Department API
    Route::get('/departments', [DepartmentController::class, 'apiList'])->name('api.departments.list');
    Route::get('/departments/select-options', [DepartmentController::class, 'getSelectOptions'])->name('api.departments.select-options');
    Route::get('/departments/express-support', [DepartmentController::class, 'checkExpressSupport'])->name('api.departments.express-support');
    Route::get('/departments/generate-code', [DepartmentController::class, 'generateCode'])->name('api.departments.generate-code');
    
    // ✅ Department Express Check (รองรับ backward compatibility)
    Route::get('/departments/is-accounting', function (Illuminate\Http\Request $request) {
        try {
            $departmentId = $request->get('department_id');
            
            if (!$departmentId) {
                return response()->json([
                    'success' => false,
                    'message' => 'กรุณาระบุ ID ของแผนก'
                ], 400);
            }
            
            $department = \App\Models\Department::find($departmentId);
            
            if (!$department) {
                return response()->json([
                    'success' => false,
                    'message' => 'ไม่พบแผนกที่ระบุ'
                ], 404);
            }
            
            return response()->json([
                'success' => true,
                'is_express_enabled' => $department->express_enabled,
                'is_accounting' => $department->express_enabled, // For backward compatibility
                'department_id' => $department->id,
                'department_name' => $department->name,
                'express_users_count' => $department->employees()->whereNotNull('express_username')->count()
            ]);
        } catch (\Exception $e) {
            return response()->json(['success' => false, 'message' => $e->getMessage()]);
        }
    })->name('api.departments.is-accounting');
    
    // Trash count API
    Route::get('/employees/trash-count', function () {
        try {
            $count = \App\Models\Employee::onlyTrashed()->count();
            return response()->json(['success' => true, 'count' => $count]);
        } catch (\Exception $e) {
            return response()->json(['success' => false, 'count' => 0]);
        }
    })->name('api.employees.trash-count');
    
    // Employee status toggle
    Route::post('/employees/{employee}/toggle-status', function (\App\Models\Employee $employee, Illuminate\Http\Request $request) {
        try {
            // Check permission
            if (!in_array(auth()->user()->role, ['super_admin', 'it_admin'])) {
                return response()->json(['success' => false, 'message' => 'ไม่มีสิทธิ์']);
            }
            
            $validated = $request->validate([
                'status' => 'required|in:active,inactive'
            ]);
            
            $employee->update(['status' => $validated['status']]);
            
            return response()->json([
                'success' => true,
                'message' => 'อัปเดตสถานะเรียบร้อยแล้ว',
                'status' => $validated['status']
            ]);
        } catch (\Exception $e) {
            return response()->json(['success' => false, 'message' => $e->getMessage()]);
        }
    })->name('api.employees.toggle-status');
    
    // Generate data for AJAX
    Route::get('/generate-data', [EmployeeController::class, 'generateData'])
        ->name('api.generate-data');
    
});

/*
|--------------------------------------------------------------------------
| Express Management Routes v2.0
|--------------------------------------------------------------------------
*/

Route::prefix('express')->middleware('auth')->name('express.')->group(function () {
    
    // Express Generation APIs
    Route::get('/generate-username', [EmployeeController::class, 'generateExpressUsernameApi'])
        ->name('generate-username');
    
    Route::get('/generate-password', [EmployeeController::class, 'generateExpressPasswordApi'])
        ->name('generate-password');
    
    // Express System APIs
    Route::get('/check-eligibility', [EmployeeController::class, 'checkExpressEligibility'])
        ->name('check-eligibility');
    
    Route::post('/test-connection', [EmployeeController::class, 'testExpressConnection'])
        ->name('test-connection');
    
    Route::get('/report', [EmployeeController::class, 'getExpressReport'])
        ->name('report');
    
    // Express Employee Management
    Route::get('/employees/{employee}/credentials', [EmployeeController::class, 'getExpressCredentials'])
        ->name('employees.credentials');
    
    // Express Dashboard
    Route::get('/dashboard', function () {
        try {
            $user = auth()->user();
            
            // Check if user can access Express dashboard
            if (!in_array($user->role, ['super_admin', 'it_admin', 'hr', 'express'])) {
                return redirect()->route('dashboard')->with('error', 'ไม่มีสิทธิ์เข้าถึงหน้านี้');
            }
            
            // Express statistics
            $totalExpress = \App\Models\Employee::whereNotNull('express_username')->count();
            $activeExpress = \App\Models\Employee::whereNotNull('express_username')
                                                ->where('status', 'active')
                                                ->count();
            $expressEnabledDepts = \App\Models\Department::where('express_enabled', true)->count();
            
            $recentExpressUsers = \App\Models\Employee::whereNotNull('express_username')
                                                      ->with('department')
                                                      ->orderBy('created_at', 'desc')
                                                      ->take(10)
                                                      ->get();
            
            return view('express.dashboard', compact(
                'totalExpress', 
                'activeExpress', 
                'expressEnabledDepts', 
                'recentExpressUsers'
            ));
            
        } catch (\Exception $e) {
            return redirect()->route('dashboard')->with('error', 'เกิดข้อผิดพลาดในการโหลดข้อมูล Express');
        }
    })->name('dashboard');
    
});

/*
|--------------------------------------------------------------------------
| Express Department Management Routes (New v2.0)
|--------------------------------------------------------------------------
*/

Route::middleware(['auth', 'role:super_admin,it_admin'])->prefix('departments')->name('departments.')->group(function () {
    
    // Toggle Express support for individual department (AJAX)
    Route::patch('{department}/toggle-express', [DepartmentController::class, 'toggleExpress'])
        ->name('toggle-express');
    
    // Get Express statistics (AJAX)
    Route::get('express/stats', [DepartmentController::class, 'getExpressStats'])
        ->name('express.stats');
    
    // Bulk update Express support (AJAX)
    Route::patch('bulk/express', [DepartmentController::class, 'bulkUpdateExpress'])
        ->name('bulk.express');
    
    // Express department report
    Route::get('express/report', function () {
        try {
            $departments = \App\Models\Department::with(['employees' => function($query) {
                $query->select('id', 'department_id', 'name', 'express_username', 'status');
            }])->get();

            $reportData = $departments->map(function ($dept) {
                $totalEmployees = $dept->employees->count();
                $expressUsers = $dept->employees->whereNotNull('express_username')->count();
                $activeExpressUsers = $dept->employees->where('status', 'active')->whereNotNull('express_username')->count();

                return [
                    'department' => $dept,
                    'total_employees' => $totalEmployees,
                    'express_users' => $expressUsers,
                    'active_express_users' => $activeExpressUsers,
                    'coverage_percentage' => $totalEmployees > 0 ? round(($expressUsers / $totalEmployees) * 100, 1) : 0,
                    'active_coverage_percentage' => $dept->employees->where('status', 'active')->count() > 0 
                        ? round(($activeExpressUsers / $dept->employees->where('status', 'active')->count()) * 100, 1) 
                        : 0
                ];
            });

            return view('departments.express-report', compact('reportData'));
        } catch (\Exception $e) {
            return redirect()->route('departments.index')->with('error', 'เกิดข้อผิดพลาดในการโหลดรายงาน Express');
        }
    })->name('express.report');
    
    // Export Express users
    Route::get('express/export', function () {
        try {
            $expressUsers = \App\Models\Employee::whereNotNull('express_username')
                                                ->with('department')
                                                ->orderBy('department_id')
                                                ->orderBy('name')
                                                ->get();
            
            $filename = 'express_users_by_department_' . date('Y-m-d_H-i-s') . '.csv';
            $headers = array(
                "Content-type"        => "text/csv",
                "Content-Disposition" => "attachment; filename=$filename",
                "Pragma"              => "no-cache",
                "Cache-Control"       => "must-revalidate, post-check=0, pre-check=0",
                "Expires"             => "0"
            );
            
            $callback = function() use($expressUsers) {
                $file = fopen('php://output', 'w');
                
                // Add BOM for Thai characters
                fputs($file, "\xEF\xBB\xBF");
                
                // Headers
                fputcsv($file, [
                    'รหัสพนักงาน', 
                    'ชื่อ-นามสกุล', 
                    'แผนก', 
                    'Express Username', 
                    'อีเมล', 
                    'สถานะ',
                    'วันที่สร้าง Express'
                ]);
                
                foreach ($expressUsers as $user) {
                    fputcsv($file, [
                        $user->employee_code ?? '',
                        $user->first_name_th . ' ' . $user->last_name_th,
                        $user->department->name ?? '',
                        $user->express_username,
                        $user->email ?? '',
                        $user->status == 'active' ? 'ปกติ' : 'ไม่ใช้งาน',
                        $user->created_at ? $user->created_at->format('d/m/Y H:i') : ''
                    ]);
                }
                
                fclose($file);
            };
            
            return response()->stream($callback, 200, $headers);
            
        } catch (\Exception $e) {
            return redirect()->route('departments.index')->with('error', 'เกิดข้อผิดพลาดในการส่งออกข้อมูล Express');
        }
    })->name('express.export');
    
});

/*
|--------------------------------------------------------------------------
| Express Import/Export Routes
|--------------------------------------------------------------------------
*/

Route::middleware(['auth', 'role:super_admin,it_admin'])->group(function () {
    
    // Export Express users (legacy route - keep for compatibility)
    Route::get('/export/express-users', function () {
        try {
            $expressUsers = \App\Models\Employee::whereNotNull('express_username')
                                                ->with('department')
                                                ->get();
            
            $filename = 'express_users_' . date('Y-m-d_H-i-s') . '.csv';
            $headers = array(
                "Content-type"        => "text/csv",
                "Content-Disposition" => "attachment; filename=$filename",
                "Pragma"              => "no-cache",
                "Cache-Control"       => "must-revalidate, post-check=0, pre-check=0",
                "Expires"             => "0"
            );
            
            $callback = function() use($expressUsers) {
                $file = fopen('php://output', 'w');
                fputcsv($file, ['Employee Code', 'Full Name', 'Department', 'Express Username', 'Email', 'Status']);
                
                foreach ($expressUsers as $user) {
                    fputcsv($file, [
                        $user->employee_code,
                        $user->first_name_th . ' ' . $user->last_name_th,
                        $user->department->name ?? '',
                        $user->express_username,
                        $user->email,
                        $user->status
                    ]);
                }
                
                fclose($file);
            };
            
            return response()->stream($callback, 200, $headers);
            
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'เกิดข้อผิดพลาดในการส่งออกข้อมูล');
        }
    })->name('export.express-users');
    
});

/*
|--------------------------------------------------------------------------
| Express Statistics Routes
|--------------------------------------------------------------------------
*/

Route::middleware(['auth', 'role:super_admin,it_admin,hr'])->group(function () {
    
    Route::get('/statistics/express', function () {
        try {
            $totalEmployees = \App\Models\Employee::count();
            $totalExpressUsers = \App\Models\Employee::whereNotNull('express_username')->count();
            $activeExpressUsers = \App\Models\Employee::whereNotNull('express_username')
                                                      ->where('status', 'active')
                                                      ->count();
            $expressEnabledDepartments = \App\Models\Department::where('express_enabled', true)->count();
            $totalDepartments = \App\Models\Department::count();
            
            $expressUsagePercentage = $totalEmployees > 0 ? 
                round(($totalExpressUsers / $totalEmployees) * 100, 2) : 0;
                
            $departmentCoveragePercentage = $totalDepartments > 0 ?
                round(($expressEnabledDepartments / $totalDepartments) * 100, 2) : 0;
            
            $stats = [
                'total_employees' => $totalEmployees,
                'total_express_users' => $totalExpressUsers,
                'active_express_users' => $activeExpressUsers,
                'express_enabled_departments' => $expressEnabledDepartments,
                'total_departments' => $totalDepartments,
                'express_usage_percentage' => $expressUsagePercentage,
                'department_coverage_percentage' => $departmentCoveragePercentage,
                'generated_at' => now()->format('Y-m-d H:i:s')
            ];
            
            return response()->json([
                'success' => true,
                'statistics' => $stats
            ]);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'เกิดข้อผิดพลาด: ' . $e->getMessage()
            ], 500);
        }
    })->name('statistics.express');
    
});

/*
|--------------------------------------------------------------------------
| Admin Express Management Routes
|--------------------------------------------------------------------------
*/

Route::middleware(['auth', 'role:super_admin,it_admin'])->prefix('admin')->name('admin.')->group(function () {
    
    // Force enable/disable Express for all departments
    Route::patch('departments/force-express/{status}', function ($status) {
        try {
            $enabled = $status === 'enable';
            $departments = \App\Models\Department::all();
            $updatedCount = 0;
            
            foreach ($departments as $department) {
                if ($enabled) {
                    if ($department->enableExpress()) $updatedCount++;
                } else {
                    if ($department->disableExpress()) $updatedCount++;
                }
            }
            
            $action = $enabled ? 'เปิดใช้งาน' : 'ปิดการใช้งาน';
            
            return redirect()->route('departments.index')
                ->with('success', "{$action} Express สำหรับทุกแผนก ({$updatedCount} แผนก) สำเร็จแล้ว");
                
        } catch (\Exception $e) {
            return redirect()->route('departments.index')
                ->with('error', 'เกิดข้อผิดพลาด: ' . $e->getMessage());
        }
    })->name('departments.force-express');
    
    // Reset Express credentials for all users
    Route::post('departments/reset-express-credentials', function () {
        try {
            $departments = \App\Models\Department::where('express_enabled', true)->get();
            $totalGenerated = 0;
            
            foreach ($departments as $department) {
                $generated = $department->generateExpressCredentialsForAll();
                $totalGenerated += $generated;
            }
            
            return redirect()->route('departments.index')
                ->with('success', "สร้าง Express credentials ใหม่สำเร็จ {$totalGenerated} คน");
                
        } catch (\Exception $e) {
            return redirect()->route('departments.index')
                ->with('error', 'เกิดข้อผิดพลาด: ' . $e->getMessage());
        }
    })->name('departments.reset-express-credentials');
    
    // Auto-enable Express for accounting departments
    Route::post('departments/auto-enable-express', function () {
        try {
            $accountingDepartments = \App\Models\Department::get()->filter(function ($dept) {
                return $dept->shouldHaveExpress() && !$dept->express_enabled;
            });
            
            $enabledCount = 0;
            foreach ($accountingDepartments as $department) {
                if ($department->enableExpress()) {
                    $enabledCount++;
                }
            }
            
            return redirect()->route('departments.index')
                ->with('success', "เปิดใช้งาน Express สำหรับแผนกบัญชี {$enabledCount} แผนกสำเร็จแล้ว");
                
        } catch (\Exception $e) {
            return redirect()->route('departments.index')
                ->with('error', 'เกิดข้อผิดพลาด: ' . $e->getMessage());
        }
    })->name('departments.auto-enable-express');
    
});

/*
|--------------------------------------------------------------------------
| Health Check
|--------------------------------------------------------------------------
*/

Route::get('/health', function () {
    try {
        // Test database connection
        $dbStatus = \DB::connection()->getPdo() ? 'connected' : 'disconnected';
        
        // Test Express functionality
        $expressUsers = \App\Models\Employee::whereNotNull('express_username')->count();
        $expressEnabledDepartments = \App\Models\Department::where('express_enabled', true)->count();
        
        return response()->json([
            'status' => 'ok',
            'timestamp' => now(),
            'version' => '2.0.0',
            'environment' => app()->environment(),
            'database' => $dbStatus,
            'features' => [
                'employee_management' => true,
                'department_management' => true,
                'express_support_v2' => true,
                'express_users_count' => $expressUsers,
                'express_enabled_departments_count' => $expressEnabledDepartments,
                'role_based_access' => true,
                'soft_delete' => true,
                'trash_management' => true,
                'bulk_actions' => true,
                'auto_credentials' => true,
                'express_auto_generation' => true,
                'express_role_visibility' => true,
                'express_department_toggle' => true,
                'express_smart_detection' => true,
                'dynamic_express_forms' => true,
            ]
        ]);
    } catch (\Exception $e) {
        return response()->json([
            'status' => 'error',
            'message' => $e->getMessage(),
            'timestamp' => now()
        ], 500);
    }
})->name('health');

/*
|--------------------------------------------------------------------------
| Test Routes (เฉพาะ Local Environment)
|--------------------------------------------------------------------------
*/

if (app()->environment('local')) {
    
    Route::get('/test-express-departments', function () {
        try {
            $departments = \App\Models\Department::select('id', 'name', 'code', 'express_enabled')
                                                 ->get()
                                                 ->map(function($dept) {
                                                     return [
                                                         'id' => $dept->id,
                                                         'name' => $dept->name,
                                                         'code' => $dept->code,
                                                         'express_enabled' => $dept->express_enabled,
                                                         'express_users_count' => $dept->employees()->whereNotNull('express_username')->count()
                                                     ];
                                                 });
            
            return response()->json([
                'success' => true,
                'message' => 'Express departments test - v2.0',
                'data' => $departments
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Express departments test failed: ' . $e->getMessage()
            ], 500);
        }
    })->name('test.express-departments');
    
    // Debug Express data
    Route::get('/debug/express-data', function () {
        try {
            $departments = \App\Models\Department::with('employees')->get();
            
            $debug = $departments->map(function ($dept) {
                return [
                    'id' => $dept->id,
                    'name' => $dept->name,
                    'express_enabled' => $dept->express_enabled,
                    'should_have_express' => $dept->shouldHaveExpress(),
                    'employee_count' => $dept->employees->count(),
                    'express_user_count' => $dept->employees->whereNotNull('express_username')->count(),
                ];
            });
            
            return response()->json([
                'success' => true,
                'debug_data' => $debug,
                'database_columns' => \Schema::getColumnListing('departments')
            ]);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
        }
    })->name('debug.express-data');
    
}

/*
|--------------------------------------------------------------------------
| Fallback Route (ต้องอยู่ท้ายสุด)
|--------------------------------------------------------------------------
*/

Route::fallback(function () {
    if (Auth::check()) {
        return redirect()->route('dashboard')->with('warning', 'หน้าที่คุณต้องการไม่พบ');
    }
    
    return redirect()->route('login')->with('error', 'หน้าที่คุณต้องการไม่พบ');
});
