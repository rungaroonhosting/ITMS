<?php

use Illuminate\Support\Facades\Route;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use App\Http\Controllers\EmployeeController;
use App\Http\Controllers\DepartmentController;
use App\Http\Controllers\BranchController; // ✅ NEW: Branch Controller

/*
|--------------------------------------------------------------------------
| Web Routes - Laravel Employee Management System v2.1 + Branch System
|--------------------------------------------------------------------------
| ✅ Features: Separated Password System, Express v2.0, Phone Duplicates Allowed
| ✅ Updated: Enhanced UI/UX, AJAX Forms, Advanced Permissions
| ✅ NEW: Branch Management System
*/

// Redirect root to appropriate page
Route::get('/', function () {
    if (Auth::check()) {
        return redirect()->route('dashboard');
    }
    return redirect()->route('login');
});

/*
|--------------------------------------------------------------------------
| Authentication Routes
|--------------------------------------------------------------------------
*/

// Login routes
Route::middleware('guest')->group(function () {
    Route::get('/login', function () {
        return view('auth.login');
    })->name('login');
    
    Route::post('/login', function (Illuminate\Http\Request $request) {
        $credentials = $request->validate([
            'email' => 'required|email',
            'password' => 'required'
        ]);

        if (Auth::attempt($credentials, $request->boolean('remember'))) {
            $request->session()->regenerate();
            
            return redirect()->intended(route('dashboard'))->with('success', 'เข้าสู่ระบบสำเร็จ');
        }

        return back()->withErrors([
            'email' => 'ข้อมูลการเข้าสู่ระบบไม่ถูกต้อง',
        ])->onlyInput('email');
    })->name('login.store');
});

// Logout routes
Route::post('/logout', function (Illuminate\Http\Request $request) {
    Auth::logout();
    $request->session()->invalidate();
    $request->session()->regenerateToken();
    
    return redirect()->route('login')->with('success', 'ออกจากระบบเรียบร้อยแล้ว');
})->name('logout');

/*
|--------------------------------------------------------------------------
| Protected Routes (ต้อง login ก่อน)
|--------------------------------------------------------------------------
*/

Route::middleware('auth')->group(function () {
    
    /*
    |--------------------------------------------------------------------------
    | Dashboard
    |--------------------------------------------------------------------------
    */
    
    Route::get('/dashboard', function () {
        try {
            $employees = \App\Models\Employee::withoutTrashed()->get();
            $trashCount = \App\Models\Employee::onlyTrashed()->count();
            
            // Express Statistics
            $expressUsers = \App\Models\Employee::withoutTrashed()->whereNotNull('express_username')->count();
            $expressEnabledDepartments = \App\Models\Department::where('express_enabled', true)->count();
            $accountingEmployees = \App\Models\Employee::withoutTrashed()->whereHas('department', function($query) {
                $query->where('express_enabled', true);
            })->count();
            
            // ✅ NEW: Enhanced Dashboard Statistics + Branch Stats
            $branchStats = [
                'total_branches' => \App\Models\Branch::count(),
                'active_branches' => \App\Models\Branch::where('status', 'active')->count(),
                'employees_with_branch' => \App\Models\Employee::withoutTrashed()->whereNotNull('branch_id')->count(),
                'branches_near_capacity' => \App\Models\Branch::whereRaw('
                    (SELECT COUNT(*) FROM employees 
                     WHERE employees.branch_id = branches.id 
                     AND employees.status = "active" 
                     AND employees.deleted_at IS NULL) >= (branches.capacity * 80 / 100)
                ')->count()
            ];
            
            $stats = [
                'total_employees' => $employees->count(),
                'active_employees' => $employees->where('status', 'active')->count(),
                'inactive_employees' => $employees->where('status', 'inactive')->count(),
                'express_users' => $expressUsers,
                'express_departments' => $expressEnabledDepartments,
                'accounting_employees' => $accountingEmployees,
                'trash_count' => $trashCount,
                'separated_passwords' => $employees->whereNotNull('email_password')->whereNotNull('password')->count(),
                'phone_duplicates_allowed' => true, // New feature indicator
                'system_version' => '2.1.0',
                // ✅ NEW: Branch statistics
                'branch_stats' => $branchStats
            ];
            
            return view('dashboard', compact('employees', 'trashCount', 'expressUsers', 'expressEnabledDepartments', 'accountingEmployees', 'stats'));
        } catch (\Exception $e) {
            // Fallback if database is not ready
            return view('dashboard', [
                'employees' => collect(),
                'trashCount' => 0,
                'expressUsers' => 0,
                'expressEnabledDepartments' => 0,
                'accountingEmployees' => 0,
                'stats' => [
                    'total_employees' => 0,
                    'active_employees' => 0,
                    'inactive_employees' => 0,
                    'express_users' => 0,
                    'express_departments' => 0,
                    'accounting_employees' => 0,
                    'trash_count' => 0,
                    'separated_passwords' => 0,
                    'phone_duplicates_allowed' => true,
                    'system_version' => '2.1.0',
                    'branch_stats' => [
                        'total_branches' => 0,
                        'active_branches' => 0,
                        'employees_with_branch' => 0,
                        'branches_near_capacity' => 0
                    ]
                ]
            ]);
        }
    })->name('dashboard');
    
    /*
    |--------------------------------------------------------------------------
    | ✅ NEW: Branch Management Routes
    |--------------------------------------------------------------------------
    */
    
    // Branch resource routes (Admin, HR, Manager access)
    Route::middleware(['role:super_admin,it_admin,hr,manager'])->group(function () {
        Route::resource('branches', BranchController::class);
        
        // Additional branch routes
        Route::prefix('branches')->name('branches.')->group(function () {
            // Toggle branch status (activate/deactivate)
            Route::patch('{branch}/toggle-status', [BranchController::class, 'toggleStatus'])
                 ->name('toggle-status');
            
            // View employees in a specific branch
            Route::get('{branch}/employees', [BranchController::class, 'employees'])
                 ->name('employees');
            
            // Transfer employees between branches
            Route::post('{branch}/transfer-employees', [BranchController::class, 'transferEmployees'])
                 ->name('transfer-employees');
            
            // Export branch data
            Route::get('export', [BranchController::class, 'export'])
                 ->name('export');
        });
    });
    
    // Branch API routes for AJAX requests
    Route::prefix('api/branches')->name('api.branches.')->group(function () {
        // Get all active branches for dropdowns
        Route::get('active', function() {
            $branches = \App\Models\Branch::where('status', 'active')
                ->orderBy('name')
                ->get(['id', 'name', 'branch_code']);
            
            return response()->json($branches->map(function($branch) {
                return [
                    'id' => $branch->id,
                    'text' => $branch->name . ' (' . $branch->branch_code . ')',
                    'name' => $branch->name,
                    'code' => $branch->branch_code,
                ];
            }));
        })->name('active');
        
        // Get branch capacity info
        Route::get('{branch}/capacity', function(\App\Models\Branch $branch) {
            $currentCount = $branch->employees()->where('status', 'active')->count();
            $usage = $branch->capacity ? round(($currentCount / $branch->capacity) * 100, 1) : 0;
            
            return response()->json([
                'current' => $currentCount,
                'capacity' => $branch->capacity ?: 0,
                'usage_percent' => $usage,
                'available' => max(0, ($branch->capacity ?: 999) - $currentCount),
                'can_accept_more' => $branch->capacity ? $currentCount < $branch->capacity : true,
            ]);
        })->name('capacity');
        
        // Search branches
        Route::get('search', function(Illuminate\Http\Request $request) {
            $search = $request->get('q', '');
            
            $branches = \App\Models\Branch::when($search, function($query, $search) {
                $query->where(function($q) use ($search) {
                    $q->where('name', 'LIKE', "%{$search}%")
                      ->orWhere('branch_code', 'LIKE', "%{$search}%")
                      ->orWhere('address', 'LIKE', "%{$search}%");
                });
            })
            ->where('status', 'active')
            ->orderBy('name')
            ->limit(20)
            ->get(['id', 'name', 'branch_code', 'address']);
            
            return response()->json($branches->map(function($branch) {
                return [
                    'id' => $branch->id,
                    'text' => $branch->name . ' (' . $branch->branch_code . ')',
                    'name' => $branch->name,
                    'code' => $branch->branch_code,
                    'address' => $branch->address,
                ];
            }));
        })->name('search');
    });
    
    /*
    |--------------------------------------------------------------------------
    | Department Management Routes
    |--------------------------------------------------------------------------
    */
    
    // Department CRUD Routes
    Route::resource('departments', DepartmentController::class);
    
    // Department Special Routes (Admin Only)
    Route::middleware(['role:super_admin,it_admin'])->group(function () {
        // Original routes
        Route::post('/departments/{department}/toggle-status', [DepartmentController::class, 'toggleStatus'])
            ->name('departments.toggleStatus');
        Route::post('/departments/bulk-action', [DepartmentController::class, 'bulkAction'])
            ->name('departments.bulkAction');
        Route::get('/departments/export-excel', [DepartmentController::class, 'exportExcel'])
            ->name('departments.exportExcel');
        Route::get('/departments/{department}/express-users', [DepartmentController::class, 'getExpressUsers'])
            ->name('departments.expressUsers');
        
        // Updated Express routes
        Route::patch('/departments/{department}/toggle-express', [DepartmentController::class, 'toggleExpress'])
            ->name('departments.toggleExpress');
        Route::get('/departments/express-statistics', [DepartmentController::class, 'getExpressStats'])
            ->name('departments.expressStatistics');
        Route::patch('/departments/bulk/express', [DepartmentController::class, 'bulkUpdateExpress'])
            ->name('departments.bulkExpress');
    });
    
    /*
    |--------------------------------------------------------------------------
    | Employee Management Routes
    |--------------------------------------------------------------------------
    */
    
    // Employee Special Routes (before resource routes)
    Route::get('/employees/export-excel', [EmployeeController::class, 'exportExcel'])->name('employees.exportExcel');
    Route::get('/employees/export-pdf', [EmployeeController::class, 'exportPdf'])->name('employees.exportPdf');
    Route::post('/employees/bulk-action', [EmployeeController::class, 'bulkAction'])->name('employees.bulkAction');
    Route::get('/employees/search', [EmployeeController::class, 'search'])->name('employees.search');    
    
    // ✅ NEW: Trash Management Routes (SuperAdmin Only)
    Route::middleware(['role:super_admin'])->group(function () {
        Route::get('/employees/trash', [EmployeeController::class, 'trash'])->name('employees.trash');
        Route::post('/employees/{id}/restore', [EmployeeController::class, 'restore'])->name('employees.restore');
        Route::delete('/employees/{id}/force-delete', [EmployeeController::class, 'forceDestroy'])->name('employees.force-delete');
        Route::post('/employees/bulk-restore', [EmployeeController::class, 'bulkRestore'])->name('employees.bulk-restore');
        Route::delete('/employees/empty-trash', [EmployeeController::class, 'emptyTrash'])->name('employees.empty-trash');
    });
    
    // ✅ NEW: Enhanced Password Management Routes (v2.1)
    Route::prefix('employees/{employee}')->name('employees.')->group(function () {
        // Individual password reset routes
        Route::post('/reset-login-password', [EmployeeController::class, 'resetPassword'])
            ->name('reset-login-password');
        Route::post('/reset-email-password', [EmployeeController::class, 'resetEmailPassword'])
            ->name('reset-email-password');
        Route::post('/reset-computer-password', [EmployeeController::class, 'resetComputerPassword'])
            ->name('reset-computer-password');
        Route::post('/reset-both-passwords', [EmployeeController::class, 'resetBothPasswords'])
            ->name('reset-both-passwords');
        
        // Express credentials management
        Route::post('/generate-express-credentials', [EmployeeController::class, 'generateExpressCredentials'])
            ->name('generate-express-credentials');
        
        // Legacy routes (for backward compatibility)
        Route::post('/reset-password', [EmployeeController::class, 'resetPassword'])->name('reset-password');
        Route::post('/send-credentials', [EmployeeController::class, 'sendCredentials'])->name('send-credentials');
        Route::get('/preview', [EmployeeController::class, 'preview'])->name('preview');
        Route::post('/generate-credentials', [EmployeeController::class, 'generateCredentials'])->name('generate-credentials');
    });
    
    // Employee CRUD routes
    Route::resource('employees', EmployeeController::class);
    
    /*
    |--------------------------------------------------------------------------
    | Profile Management
    |--------------------------------------------------------------------------
    */
    
    Route::get('/profile', function () {
        return view('profile', ['user' => auth()->user()]);
    })->name('profile');
    
    Route::put('/profile', function (Illuminate\Http\Request $request) {
        $user = auth()->user();
        
        $validated = $request->validate([
            'first_name_th' => 'required|string|max:100',
            'last_name_th' => 'required|string|max:100',
            'first_name_en' => 'required|string|max:100',
            'last_name_en' => 'required|string|max:100',
            'phone' => 'required|string|max:20', // ✅ Phone duplicates allowed
            'nickname' => 'nullable|string|max:50',
        ]);
        
        $user->update($validated);
        
        return back()->with('success', 'อัปเดตข้อมูลส่วนตัวเรียบร้อยแล้ว');
    })->name('profile.update');
    
    Route::put('/profile/password', function (Illuminate\Http\Request $request) {
        $request->validate([
            'current_password' => 'required',
            'password' => 'required|confirmed|min:6',
        ]);
        
        $user = auth()->user();
        
        if (!Hash::check($request->current_password, $user->password)) {
            return back()->withErrors(['current_password' => 'รหัสผ่านปัจจุบันไม่ถูกต้อง']);
        }
        
        $user->update([
            'password' => Hash::make($request->password)
        ]);
        
        return back()->with('success', 'เปลี่ยนรหัสผ่านเรียบร้อยแล้ว');
    })->name('profile.password.update');
    
});

/*
|--------------------------------------------------------------------------
| API Routes สำหรับ AJAX และ Express Generation
|--------------------------------------------------------------------------
*/

Route::prefix('api')->middleware('auth')->group(function () {
    
    // ✅ UPDATED: Enhanced Employee APIs
    Route::prefix('employees')->name('api.employees.')->group(function () {
        Route::get('/', [EmployeeController::class, 'apiIndex'])->name('index');
        Route::get('/search', [EmployeeController::class, 'apiSearch'])->name('search');
        Route::get('/{employee}', [EmployeeController::class, 'apiShow'])->name('show');
        
        // ✅ NEW: Enhanced password management APIs
        Route::post('/{employee}/reset-login-password', [EmployeeController::class, 'resetPassword'])
            ->name('reset-login-password');
        Route::post('/{employee}/reset-email-password', [EmployeeController::class, 'resetEmailPassword'])
            ->name('reset-email-password');
        Route::post('/{employee}/reset-computer-password', [EmployeeController::class, 'resetComputerPassword'])
            ->name('reset-computer-password');
        Route::post('/{employee}/reset-both-passwords', [EmployeeController::class, 'resetBothPasswords'])
            ->name('reset-both-passwords');
        
        // Express management
        Route::post('/{employee}/generate-express-credentials', [EmployeeController::class, 'generateExpressCredentials'])
            ->name('generate-express-credentials');
        Route::get('/{employee}/express-credentials', [EmployeeController::class, 'getExpressCredentials'])
            ->name('express-credentials');
        
        // ✅ NEW: Employee statistics
        Route::get('/statistics/overview', function() {
            try {
                $stats = [
                    'total' => \App\Models\Employee::withoutTrashed()->count(),
                    'active' => \App\Models\Employee::withoutTrashed()->where('status', 'active')->count(),
                    'inactive' => \App\Models\Employee::withoutTrashed()->where('status', 'inactive')->count(),
                    'express_users' => \App\Models\Employee::withoutTrashed()->whereNotNull('express_username')->count(),
                    'trash_count' => \App\Models\Employee::onlyTrashed()->count(),
                    'by_role' => \App\Models\Employee::withoutTrashed()
                        ->selectRaw('role, COUNT(*) as count')
                        ->groupBy('role')
                        ->pluck('count', 'role'),
                    'by_department' => \App\Models\Employee::withoutTrashed()
                        ->join('departments', 'employees.department_id', '=', 'departments.id')
                        ->selectRaw('departments.name as department_name, COUNT(*) as count')
                        ->groupBy('departments.name')
                        ->pluck('count', 'department_name'),
                    // ✅ NEW: Branch statistics
                    'by_branch' => \App\Models\Employee::withoutTrashed()
                        ->leftJoin('branches', 'employees.branch_id', '=', 'branches.id')
                        ->selectRaw('COALESCE(branches.name, "ไม่ระบุสาขา") as branch_name, COUNT(*) as count')
                        ->groupBy('branches.name')
                        ->pluck('count', 'branch_name'),
                    'separated_passwords' => \App\Models\Employee::withoutTrashed()
                        ->whereNotNull('email_password')
                        ->whereNotNull('password')
                        ->count()
                ];
                
                return response()->json([
                    'success' => true,
                    'statistics' => $stats
                ]);
                
            } catch (\Exception $e) {
                return response()->json([
                    'success' => false,
                    'message' => $e->getMessage()
                ], 500);
            }
        })->name('statistics');
        
        // ✅ NEW: Phone duplicate statistics
        Route::get('/phone-duplicates', function() {
            try {
                $duplicates = \App\Models\Employee::withoutTrashed()
                    ->whereNotNull('phone')
                    ->where('phone', '!=', '')
                    ->selectRaw('phone, COUNT(*) as count')
                    ->groupBy('phone')
                    ->havingRaw('COUNT(*) > 1')
                    ->orderBy('count', 'desc')
                    ->get();
                
                return response()->json([
                    'success' => true,
                    'duplicates' => $duplicates,
                    'total_duplicates' => $duplicates->count(),
                    'note' => 'Phone duplicates are now allowed in the system'
                ]);
                
            } catch (\Exception $e) {
                return response()->json([
                    'success' => false,
                    'message' => $e->getMessage()
                ], 500);
            }
        })->name('phone-duplicates');
        
        // Employee status toggle
        Route::post('/{employee}/toggle-status', function (\App\Models\Employee $employee, Illuminate\Http\Request $request) {
            try {
                // Check permission
                if (!in_array(auth()->user()->role, ['super_admin', 'it_admin'])) {
                    return response()->json(['success' => false, 'message' => 'ไม่มีสิทธิ์']);
                }
                
                $validated = $request->validate([
                    'status' => 'required|in:active,inactive'
                ]);
                
                $employee->update(['status' => $validated['status']]);
                
                return response()->json([
                    'success' => true,
                    'message' => 'อัปเดตสถานะเรียบร้อยแล้ว',
                    'status' => $validated['status']
                ]);
            } catch (\Exception $e) {
                return response()->json(['success' => false, 'message' => $e->getMessage()]);
            }
        })->name('toggle-status');
        
        // ✅ UPDATED: Trash count API
        Route::get('/trash-count', function () {
            try {
                $count = \App\Models\Employee::onlyTrashed()->count();
                return response()->json(['success' => true, 'count' => $count]);
            } catch (\Exception $e) {
                return response()->json(['success' => false, 'count' => 0]);
            }
        })->name('trash-count');
    });
    
    // ✅ UPDATED: Enhanced generation APIs (แยกรหัสผ่าน)
    Route::prefix('generate')->name('api.generate.')->group(function () {
        // Separated password generation
        Route::get('/email-password', function() {
            $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
            $password = '';
            for ($i = 0; $i < 10; $i++) { // Email: 10 chars
                $password .= $chars[random_int(0, strlen($chars) - 1)];
            }
            return response()->json(['email_password' => $password]);
        })->name('email-password');
        
        Route::get('/login-password', function() {
            $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
            $password = '';
            for ($i = 0; $i < 12; $i++) { // Login: 12 chars - more secure
                $password .= $chars[random_int(0, strlen($chars) - 1)];
            }
            return response()->json(['login_password' => $password]);
        })->name('login-password');
        
        Route::get('/computer-password', function() {
            $chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*';
            $password = '';
            for ($i = 0; $i < 10; $i++) { // Computer: 10 chars
                $password .= $chars[random_int(0, strlen($chars) - 1)];
            }
            return response()->json(['computer_password' => $password]);
        })->name('computer-password');
        
        // Express credential generation
        Route::get('/express-username', [EmployeeController::class, 'generateExpressUsernameApi'])
            ->name('express-username');
        Route::get('/express-password', [EmployeeController::class, 'generateExpressPasswordApi'])
            ->name('express-password');
        
        // Other credentials
        Route::get('/employee-code', function() {
            do {
                $code = 'EMP' . str_pad(random_int(1, 999), 3, '0', STR_PAD_LEFT);
            } while (\App\Models\Employee::withoutTrashed()->where('employee_code', $code)->exists());
            
            return response()->json(['employee_code' => $code]);
        })->name('employee-code');
        
        Route::get('/keycard-id', function() {
            do {
                $id = 'KC' . str_pad(random_int(1, 999999), 6, '0', STR_PAD_LEFT);
            } while (\App\Models\Employee::withoutTrashed()->where('keycard_id', $id)->exists());
            
            return response()->json(['keycard_id' => $id]);
        })->name('keycard-id');
        
        Route::get('/copier-code', function() {
            return response()->json([
                'copier_code' => str_pad(random_int(1, 9999), 4, '0', STR_PAD_LEFT)
            ]);
        })->name('copier-code');
    });
    
    // ✅ Express eligibility check (Updated to use department express_enabled)
    Route::get('/check-express-eligibility', [EmployeeController::class, 'checkExpressEligibility'])
        ->name('check-express-eligibility');
    
    // Express connection test
    Route::post('/test-express-connection', [EmployeeController::class, 'testExpressConnection'])
        ->name('test-express-connection');
    
    // Express usage report
    Route::get('/express-report', [EmployeeController::class, 'getExpressReport'])
        ->name('express-report');
    
    // ✅ UPDATED: Enhanced Department APIs
    Route::prefix('departments')->name('api.departments.')->group(function () {
        Route::get('/', [DepartmentController::class, 'apiList'])->name('list');
        Route::get('/select-options', [DepartmentController::class, 'getSelectOptions'])->name('select-options');
        Route::get('/express-support', [DepartmentController::class, 'checkExpressSupport'])->name('express-support');
        Route::get('/generate-code', [DepartmentController::class, 'generateCode'])->name('generate-code');
        
        // ✅ Department Express Check (รองรับ backward compatibility)
        Route::get('/is-accounting', function (Illuminate\Http\Request $request) {
            try {
                $departmentId = $request->get('department_id');
                
                if (!$departmentId) {
                    return response()->json([
                        'success' => false,
                        'message' => 'กรุณาระบุ ID ของแผนก'
                    ], 400);
                }
                
                $department = \App\Models\Department::find($departmentId);
                
                if (!$department) {
                    return response()->json([
                        'success' => false,
                        'message' => 'ไม่พบแผนกที่ระบุ'
                    ], 404);
                }
                
                return response()->json([
                    'success' => true,
                    'is_express_enabled' => $department->express_enabled,
                    'is_accounting' => $department->express_enabled, // For backward compatibility
                    'department_id' => $department->id,
                    'department_name' => $department->name,
                    'express_users_count' => $department->employees()->withoutTrashed()->whereNotNull('express_username')->count()
                ]);
            } catch (\Exception $e) {
                return response()->json(['success' => false, 'message' => $e->getMessage()]);
            }
        })->name('is-accounting');
        
        // ✅ NEW: Enhanced department express check
        Route::get('/express-enabled', function(Illuminate\Http\Request $request) {
            $departmentId = $request->get('department_id');
            
            if (!$departmentId) {
                return response()->json(['error' => 'กรุณาระบุแผนก'], 400);
            }
            
            try {
                $department = \App\Models\Department::find($departmentId);
                
                if (!$department) {
                    return response()->json(['error' => 'ไม่พบแผนกที่ระบุ'], 404);
                }
                
                return response()->json([
                    'success' => true,
                    'express_enabled' => $department->express_enabled,
                    'department_name' => $department->name,
                    'express_users_count' => $department->employees()
                        ->withoutTrashed()
                        ->whereNotNull('express_username')
                        ->count()
                ]);
                
            } catch (\Exception $e) {
                return response()->json(['error' => $e->getMessage()], 500);
            }
        })->name('express-enabled');
    });
    
    // Generate data for AJAX
    Route::get('/generate-data', [EmployeeController::class, 'generateData'])
        ->name('generate-data');
});

/*
|--------------------------------------------------------------------------
| Express Management Routes v2.0
|--------------------------------------------------------------------------
*/

Route::prefix('express')->middleware('auth')->name('express.')->group(function () {
    
    // Express Generation APIs
    Route::get('/generate-username', [EmployeeController::class, 'generateExpressUsernameApi'])
        ->name('generate-username');
    
    Route::get('/generate-password', [EmployeeController::class, 'generateExpressPasswordApi'])
        ->name('generate-password');
    
    // Express System APIs
    Route::get('/check-eligibility', [EmployeeController::class, 'checkExpressEligibility'])
        ->name('check-eligibility');
    
    Route::post('/test-connection', [EmployeeController::class, 'testExpressConnection'])
        ->name('test-connection');
    
    Route::get('/report', [EmployeeController::class, 'getExpressReport'])
        ->name('report');
    
    // Express Employee Management
    Route::get('/employees/{employee}/credentials', [EmployeeController::class, 'getExpressCredentials'])
        ->name('employees.credentials');
    
    // Express Dashboard
    Route::get('/dashboard', function () {
        try {
            $user = auth()->user();
            
            // Check if user can access Express dashboard
            if (!in_array($user->role, ['super_admin', 'it_admin', 'hr', 'express'])) {
                return redirect()->route('dashboard')->with('error', 'ไม่มีสิทธิ์เข้าถึงหน้านี้');
            }
            
            // Express statistics (ใช้ withoutTrashed)
            $totalExpress = \App\Models\Employee::withoutTrashed()->whereNotNull('express_username')->count();
            $activeExpress = \App\Models\Employee::withoutTrashed()->whereNotNull('express_username')
                                                ->where('status', 'active')
                                                ->count();
            $expressEnabledDepts = \App\Models\Department::where('express_enabled', true)->count();
            
            $recentExpressUsers = \App\Models\Employee::withoutTrashed()->whereNotNull('express_username')
                                                      ->with('department')
                                                      ->orderBy('created_at', 'desc')
                                                      ->take(10)
                                                      ->get();
            
            return view('express.dashboard', compact(
                'totalExpress', 
                'activeExpress', 
                'expressEnabledDepts', 
                'recentExpressUsers'
            ));
            
        } catch (\Exception $e) {
            return redirect()->route('dashboard')->with('error', 'เกิดข้อผิดพลาดในการโหลดข้อมูล Express');
        }
    })->name('dashboard');
    
});

/*
|--------------------------------------------------------------------------
| ✅ NEW: Express Management Routes v2.1 (Enhanced)
|--------------------------------------------------------------------------
*/

Route::middleware(['auth'])->prefix('express/v2')->name('express.v2.')->group(function () {
    
    // Express dashboard v2
    Route::get('/dashboard', function () {
        try {
            $user = auth()->user();
            
            if (!in_array($user->role, ['super_admin', 'it_admin', 'hr', 'express'])) {
                return redirect()->route('dashboard')->with('error', 'ไม่มีสิทธิ์เข้าถึงหน้านี้');
            }
            
            // Enhanced Express statistics
            $stats = [
                'total_employees' => \App\Models\Employee::withoutTrashed()->count(),
                'total_express' => \App\Models\Employee::withoutTrashed()->whereNotNull('express_username')->count(),
                'active_express' => \App\Models\Employee::withoutTrashed()
                    ->whereNotNull('express_username')
                    ->where('status', 'active')
                    ->count(),
                'express_departments' => \App\Models\Department::where('express_enabled', true)->count(),
                'separated_passwords' => \App\Models\Employee::withoutTrashed()
                    ->whereNotNull('email_password')
                    ->whereNotNull('password')
                    ->count()
            ];
            
            $recentExpressUsers = \App\Models\Employee::withoutTrashed()
                ->whereNotNull('express_username')
                ->with('department')
                ->orderBy('updated_at', 'desc')
                ->take(10)
                ->get();
            
            return view('express.dashboard-v2', compact('stats', 'recentExpressUsers'));
            
        } catch (\Exception $e) {
            return redirect()->route('dashboard')->with('error', 'เกิดข้อผิดพลาดในการโหลดข้อมูล Express');
        }
    })->name('dashboard');
    
    // Express reports v2
    Route::get('/reports', function() {
        try {
            $departments = \App\Models\Department::with(['employees' => function($query) {
                $query->withoutTrashed()->select('id', 'department_id', 'first_name_th', 'last_name_th', 'express_username', 'status');
            }])->get();

            $reportData = $departments->map(function ($dept) {
                $totalEmployees = $dept->employees->count();
                $expressUsers = $dept->employees->whereNotNull('express_username')->count();
                $activeExpressUsers = $dept->employees->where('status', 'active')->whereNotNull('express_username')->count();
                
                return [
                    'department' => $dept,
                    'total_employees' => $totalEmployees,
                    'express_users' => $expressUsers,
                    'active_express_users' => $activeExpressUsers,
                    'coverage_percentage' => $totalEmployees > 0 ? round(($expressUsers / $totalEmployees) * 100, 1) : 0,
                    'express_enabled' => $dept->express_enabled
                ];
            });

            return view('express.reports-v2', compact('reportData'));
            
        } catch (\Exception $e) {
            return redirect()->route('express.v2.dashboard')->with('error', 'เกิดข้อผิดพลาดในการโหลดรายงาน');
        }
    })->name('reports');
    
});

/*
|--------------------------------------------------------------------------
| Express Department Management Routes (New v2.0)
|--------------------------------------------------------------------------
*/

Route::middleware(['auth', 'role:super_admin,it_admin'])->prefix('departments')->name('departments.')->group(function () {
    
    // Toggle Express support for individual department (AJAX)
    Route::patch('{department}/toggle-express', [DepartmentController::class, 'toggleExpress'])
        ->name('toggle-express');
    
    // Get Express statistics (AJAX)
    Route::get('express/stats', [DepartmentController::class, 'getExpressStats'])
        ->name('express.stats');
    
    // Bulk update Express support (AJAX)
    Route::patch('bulk/express', [DepartmentController::class, 'bulkUpdateExpress'])
        ->name('bulk.express');
    
    // Express department report
    Route::get('express/report', function () {
        try {
            $departments = \App\Models\Department::with(['employees' => function($query) {
                $query->withoutTrashed()->select('id', 'department_id', 'first_name_th', 'last_name_th', 'express_username', 'status');
            }])->get();

            $reportData = $departments->map(function ($dept) {
                $totalEmployees = $dept->employees->count();
                $expressUsers = $dept->employees->whereNotNull('express_username')->count();
                $activeExpressUsers = $dept->employees->where('status', 'active')->whereNotNull('express_username')->count();

                return [
                    'department' => $dept,
                    'total_employees' => $totalEmployees,
                    'express_users' => $expressUsers,
                    'active_express_users' => $activeExpressUsers,
                    'coverage_percentage' => $totalEmployees > 0 ? round(($expressUsers / $totalEmployees) * 100, 1) : 0,
                    'active_coverage_percentage' => $dept->employees->where('status', 'active')->count() > 0 
                        ? round(($activeExpressUsers / $dept->employees->where('status', 'active')->count()) * 100, 1) 
                        : 0
                ];
            });

            return view('departments.express-report', compact('reportData'));
        } catch (\Exception $e) {
            return redirect()->route('departments.index')->with('error', 'เกิดข้อผิดพลาดในการโหลดรายงาน Express');
        }
    })->name('express.report');
    
    // Export Express users
    Route::get('express/export', function () {
        try {
            $expressUsers = \App\Models\Employee::withoutTrashed()->whereNotNull('express_username')
                                                ->with('department')
                                                ->orderBy('department_id')
                                                ->orderBy('first_name_th')
                                                ->get();
            
            $filename = 'express_users_by_department_' . date('Y-m-d_H-i-s') . '.csv';
            $headers = array(
                "Content-type"        => "text/csv",
                "Content-Disposition" => "attachment; filename=$filename",
                "Pragma"              => "no-cache",
                "Cache-Control"       => "must-revalidate, post-check=0, pre-check=0",
                "Expires"             => "0"
            );
            
            $callback = function() use($expressUsers) {
                $file = fopen('php://output', 'w');
                
                // Add BOM for Thai characters
                fputs($file, "\xEF\xBB\xBF");
                
                // Headers
                fputcsv($file, [
                    'รหัสพนักงาน', 
                    'ชื่อ-นามสกุล', 
                    'แผนก', 
                    'Express Username', 
                    'อีเมล', 
                    'สถานะ',
                    'วันที่สร้าง Express'
                ]);
                
                foreach ($expressUsers as $user) {
                    fputcsv($file, [
                        $user->employee_code ?? '',
                        $user->first_name_th . ' ' . $user->last_name_th,
                        $user->department->name ?? '',
                        $user->express_username,
                        $user->email ?? '',
                        $user->status == 'active' ? 'ปกติ' : 'ไม่ใช้งาน',
                        $user->created_at ? $user->created_at->format('d/m/Y H:i') : ''
                    ]);
                }
                
                fclose($file);
            };
            
            return response()->stream($callback, 200, $headers);
            
        } catch (\Exception $e) {
            return redirect()->route('departments.index')->with('error', 'เกิดข้อผิดพลาดในการส่งออกข้อมูล Express');
        }
    })->name('express.export');
    
});

/*
|--------------------------------------------------------------------------
| Express Import/Export Routes
|--------------------------------------------------------------------------
*/

Route::middleware(['auth', 'role:super_admin,it_admin'])->group(function () {
    
    // Export Express users (legacy route - keep for compatibility)
    Route::get('/export/express-users', function () {
        try {
            $expressUsers = \App\Models\Employee::withoutTrashed()->whereNotNull('express_username')
                                                ->with('department')
                                                ->get();
            
            $filename = 'express_users_' . date('Y-m-d_H-i-s') . '.csv';
            $headers = array(
                "Content-type"        => "text/csv",
                "Content-Disposition" => "attachment; filename=$filename",
                "Pragma"              => "no-cache",
                "Cache-Control"       => "must-revalidate, post-check=0, pre-check=0",
                "Expires"             => "0"
            );
            
            $callback = function() use($expressUsers) {
                $file = fopen('php://output', 'w');
                fputcsv($file, ['Employee Code', 'Full Name', 'Department', 'Express Username', 'Email', 'Status']);
                
                foreach ($expressUsers as $user) {
                    fputcsv($file, [
                        $user->employee_code,
                        $user->first_name_th . ' ' . $user->last_name_th,
                        $user->department->name ?? '',
                        $user->express_username,
                        $user->email,
                        $user->status
                    ]);
                }
                
                fclose($file);
            };
            
            return response()->stream($callback, 200, $headers);
            
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'เกิดข้อผิดพลาดในการส่งออกข้อมูล');
        }
    })->name('export.express-users');
    
});

/*
|--------------------------------------------------------------------------
| Express Statistics Routes
|--------------------------------------------------------------------------
*/

Route::middleware(['auth', 'role:super_admin,it_admin,hr'])->group(function () {
    
    Route::get('/statistics/express', function () {
        try {
            $totalEmployees = \App\Models\Employee::withoutTrashed()->count();
            $totalExpressUsers = \App\Models\Employee::withoutTrashed()->whereNotNull('express_username')->count();
            $activeExpressUsers = \App\Models\Employee::withoutTrashed()->whereNotNull('express_username')
                                                      ->where('status', 'active')
                                                      ->count();
            $expressEnabledDepartments = \App\Models\Department::where('express_enabled', true)->count();
            $totalDepartments = \App\Models\Department::count();
            
            $expressUsagePercentage = $totalEmployees > 0 ? 
                round(($totalExpressUsers / $totalEmployees) * 100, 2) : 0;
                
            $departmentCoveragePercentage = $totalDepartments > 0 ?
                round(($expressEnabledDepartments / $totalDepartments) * 100, 2) : 0;
            
            // ✅ NEW: Enhanced statistics
            $separatedPasswordsCount = \App\Models\Employee::withoutTrashed()
                ->whereNotNull('email_password')
                ->whereNotNull('password')
                ->count();
            
            $stats = [
                'total_employees' => $totalEmployees,
                'total_express_users' => $totalExpressUsers,
                'active_express_users' => $activeExpressUsers,
                'express_enabled_departments' => $expressEnabledDepartments,
                'total_departments' => $totalDepartments,
                'express_usage_percentage' => $expressUsagePercentage,
                'department_coverage_percentage' => $departmentCoveragePercentage,
                'separated_passwords_count' => $separatedPasswordsCount,
                'separated_passwords_percentage' => $totalEmployees > 0 ? 
                    round(($separatedPasswordsCount / $totalEmployees) * 100, 2) : 0,
                'generated_at' => now()->format('Y-m-d H:i:s')
            ];
            
            return response()->json([
                'success' => true,
                'statistics' => $stats
            ]);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'เกิดข้อผิดพลาด: ' . $e->getMessage()
            ], 500);
        }
    })->name('statistics.express');
    
});

/*
|--------------------------------------------------------------------------
| ✅ NEW: Bulk Operations Routes (v2.1)
|--------------------------------------------------------------------------
*/

Route::middleware(['auth', 'role:super_admin,it_admin'])->prefix('bulk')->name('bulk.')->group(function () {
    
    // Bulk password reset
    Route::post('/reset-passwords', function(Illuminate\Http\Request $request) {
        $request->validate([
            'employee_ids' => 'required|array',
            'employee_ids.*' => 'exists:employees,id',
            'password_type' => 'required|in:email,login,computer,both'
        ]);
        
        try {
            $employees = \App\Models\Employee::whereIn('id', $request->employee_ids)->get();
            $results = [];
            
            foreach ($employees as $employee) {
                $result = ['employee_name' => $employee->full_name_th];
                
                switch ($request->password_type) {
                    case 'email':
                        $newPassword = \Str::random(10);
                        $employee->update(['email_password' => $newPassword]);
                        $result['new_email_password'] = $newPassword;
                        break;
                        
                    case 'login':
                        $newPassword = \Str::random(12);
                        $employee->update(['password' => \Hash::make($newPassword)]);
                        $result['new_login_password'] = $newPassword;
                        break;
                        
                    case 'computer':
                        $newPassword = \Str::random(10);
                        $employee->update(['computer_password' => $newPassword]);
                        $result['new_computer_password'] = $newPassword;
                        break;
                        
                    case 'both':
                        $emailPassword = \Str::random(10);
                        $loginPassword = \Str::random(12);
                        $employee->update([
                            'email_password' => $emailPassword,
                            'password' => \Hash::make($loginPassword)
                        ]);
                        $result['new_email_password'] = $emailPassword;
                        $result['new_login_password'] = $loginPassword;
                        break;
                }
                
                $results[] = $result;
            }
            
            return response()->json([
                'success' => true,
                'message' => 'รีเซ็ตรหัสผ่านจำนวน ' . count($results) . ' คน สำเร็จ',
                'results' => $results
            ]);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'เกิดข้อผิดพลาด: ' . $e->getMessage()
            ], 500);
        }
    })->name('reset-passwords');
    
    // Bulk Express credentials generation
    Route::post('/generate-express', function(Illuminate\Http\Request $request) {
        $request->validate([
            'department_ids' => 'required|array',
            'department_ids.*' => 'exists:departments,id'
        ]);
        
        try {
            $departments = \App\Models\Department::whereIn('id', $request->department_ids)
                ->where('express_enabled', true)
                ->get();
            
            $results = [];
            
            foreach ($departments as $department) {
                $employees = $department->employees()->withoutTrashed()->get();
                
                foreach ($employees as $employee) {
                    if (!$employee->express_username) {
                        // Generate Express username
                        $combined = preg_replace('/[^a-zA-Z]/', '', $employee->first_name_en . $employee->last_name_en);
                        $username = strtolower($combined);
                        
                        if (strlen($username) >= 7) {
                            $username = substr($username, 0, 7);
                        } else {
                            $username = str_pad($username, 7, 'x');
                        }
                        
                        // Check for uniqueness
                        $counter = 1;
                        $originalUsername = $username;
                        while (\App\Models\Employee::withoutTrashed()->where('express_username', $username)->exists()) {
                            $username = substr($originalUsername, 0, 6) . $counter;
                            $counter++;
                        }
                        
                        // Generate Express password
                        $letters = 'abcdefghijklmnopqrstuvwxyz';
                        $numbers = '0123456789';
                        $password = $numbers[mt_rand(0, strlen($numbers) - 1)];
                        for ($i = 0; $i < 3; $i++) {
                            $password .= $letters[mt_rand(0, strlen($letters) - 1)];
                        }
                        $passwordArray = str_split($password);
                        shuffle($passwordArray);
                        $expressPassword = implode('', $passwordArray);
                        
                        $employee->update([
                            'express_username' => $username,
                            'express_password' => $expressPassword
                        ]);
                        
                        $results[] = [
                            'employee_name' => $employee->full_name_th,
                            'department' => $department->name,
                            'express_username' => $username,
                            'express_password' => $expressPassword
                        ];
                    }
                }
            }
            
            return response()->json([
                'success' => true,
                'message' => 'สร้าง Express credentials จำนวน ' . count($results) . ' คน สำเร็จ',
                'results' => $results
            ]);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'เกิดข้อผิดพลาด: ' . $e->getMessage()
            ], 500);
        }
    })->name('generate-express');
    
});

/*
|--------------------------------------------------------------------------
| Admin Express Management Routes
|--------------------------------------------------------------------------
*/

Route::middleware(['auth', 'role:super_admin,it_admin'])->prefix('admin')->name('admin.')->group(function () {
    
    // Force enable/disable Express for all departments
    Route::patch('departments/force-express/{status}', function ($status) {
        try {
            $enabled = $status === 'enable';
            $departments = \App\Models\Department::all();
            $updatedCount = 0;
            
            foreach ($departments as $department) {
                $department->update(['express_enabled' => $enabled]);
                $updatedCount++;
            }
            
            $action = $enabled ? 'เปิดใช้งาน' : 'ปิดการใช้งาน';
            
            return redirect()->route('departments.index')
                ->with('success', "{$action} Express สำหรับทุกแผนก ({$updatedCount} แผนก) สำเร็จแล้ว");
                
        } catch (\Exception $e) {
            return redirect()->route('departments.index')
                ->with('error', 'เกิดข้อผิดพลาด: ' . $e->getMessage());
        }
    })->name('departments.force-express');
    
    // Reset Express credentials for all users
    Route::post('departments/reset-express-credentials', function () {
        try {
            $departments = \App\Models\Department::where('express_enabled', true)->get();
            $totalGenerated = 0;
            
            foreach ($departments as $department) {
                $employees = $department->employees()->withoutTrashed()->get();
                foreach ($employees as $employee) {
                    if (!$employee->express_username) {
                        // Generate new credentials (simplified)
                        $employee->update([
                            'express_username' => strtolower(substr($employee->first_name_en . $employee->last_name_en, 0, 7)),
                            'express_password' => \Str::random(4)
                        ]);
                        $totalGenerated++;
                    }
                }
            }
            
            return redirect()->route('departments.index')
                ->with('success', "สร้าง Express credentials ใหม่สำเร็จ {$totalGenerated} คน");
                
        } catch (\Exception $e) {
            return redirect()->route('departments.index')
                ->with('error', 'เกิดข้อผิดพลาด: ' . $e->getMessage());
        }
    })->name('departments.reset-express-credentials');
    
    // Auto-enable Express for accounting departments
    Route::post('departments/auto-enable-express', function () {
        try {
            $accountingKeywords = ['บัญชี', 'การเงิน', 'accounting', 'finance'];
            $enabledCount = 0;
            
            foreach ($accountingKeywords as $keyword) {
                $updated = \App\Models\Department::where('name', 'like', "%{$keyword}%")
                    ->where('express_enabled', false)
                    ->update(['express_enabled' => true]);
                $enabledCount += $updated;
            }
            
            return redirect()->route('departments.index')
                ->with('success', "เปิดใช้งาน Express สำหรับแผนกบัญชี {$enabledCount} แผนกสำเร็จแล้ว");
                
        } catch (\Exception $e) {
            return redirect()->route('departments.index')
                ->with('error', 'เกิดข้อผิดพลาด: ' . $e->getMessage());
        }
    })->name('departments.auto-enable-express');
    
});

/*
|--------------------------------------------------------------------------
| ✅ NEW: Trash Management Routes (Super Admin Only)
|--------------------------------------------------------------------------
*/

Route::middleware(['auth', 'role:super_admin'])->prefix('trash')->name('trash.')->group(function () {
    
    // Trash dashboard
    Route::get('/', function () {
        try {
            $trashedEmployees = \App\Models\Employee::onlyTrashed()->with('department')->orderBy('deleted_at', 'desc')->get();
            $trashedDepartments = \App\Models\Department::onlyTrashed()->orderBy('deleted_at', 'desc')->get();
            
            return view('trash.index', compact('trashedEmployees', 'trashedDepartments'));
        } catch (\Exception $e) {
            return redirect()->route('dashboard')->with('error', 'เกิดข้อผิดพลาดในการโหลดถังขยะ');
        }
    })->name('index');
    
    // Employee trash operations
    Route::prefix('employees')->name('employees.')->group(function () {
        Route::post('{id}/restore', [EmployeeController::class, 'restore'])->name('restore');
        Route::delete('{id}/force-delete', [EmployeeController::class, 'forceDestroy'])->name('force-delete');
        Route::post('bulk-restore', [EmployeeController::class, 'bulkRestore'])->name('bulk-restore');
        Route::delete('empty', [EmployeeController::class, 'emptyTrash'])->name('empty');
    });
    
    // Quick stats API
    Route::get('stats', function () {
        try {
            $stats = [
                'employees' => \App\Models\Employee::onlyTrashed()->count(),
                'departments' => \App\Models\Department::onlyTrashed()->count(),
                'total_items' => \App\Models\Employee::onlyTrashed()->count() + \App\Models\Department::onlyTrashed()->count(),
                'oldest_item' => \App\Models\Employee::onlyTrashed()->orderBy('deleted_at', 'asc')->first()?->deleted_at,
                'newest_item' => \App\Models\Employee::onlyTrashed()->orderBy('deleted_at', 'desc')->first()?->deleted_at
            ];
            
            return response()->json(['success' => true, 'stats' => $stats]);
        } catch (\Exception $e) {
            return response()->json(['success' => false, 'message' => $e->getMessage()]);
        }
    })->name('stats');
    
});

/*
|--------------------------------------------------------------------------
| ✅ NEW: System Health Check & Monitoring (v2.1)
|--------------------------------------------------------------------------
*/

// Main health check
Route::get('/health', function () {
    try {
        // Test database connection
        $dbStatus = \DB::connection()->getPdo() ? 'connected' : 'disconnected';
        
        // Test Express functionality
        $expressUsers = \App\Models\Employee::withoutTrashed()->whereNotNull('express_username')->count();
        $expressEnabledDepartments = \App\Models\Department::where('express_enabled', true)->count();
        
        // ✅ NEW: Enhanced system checks
        $separatedPasswordsCount = \App\Models\Employee::withoutTrashed()
            ->whereNotNull('email_password')
            ->whereNotNull('password')
            ->count();
        
        // ✅ NEW: Branch statistics
        $branchStats = [
            'total_branches' => \App\Models\Branch::count(),
            'active_branches' => \App\Models\Branch::where('status', 'active')->count(),
            'employees_with_branch' => \App\Models\Employee::withoutTrashed()->whereNotNull('branch_id')->count(),
        ];
        
        // Trash statistics
        $trashStats = [
            'employees_in_trash' => \App\Models\Employee::onlyTrashed()->count(),
            'departments_in_trash' => \App\Models\Department::onlyTrashed()->count(),
        ];
        
        return response()->json([
            'status' => 'ok',
            'timestamp' => now(),
            'version' => '2.1.0 + Branch System', // ✅ Updated version
            'environment' => app()->environment(),
            'database' => $dbStatus,
            'features' => [
                'employee_management' => true,
                'department_management' => true,
                'branch_management' => true, // ✅ NEW
                'express_support_v2' => true,
                'express_users_count' => $expressUsers,
                'express_enabled_departments_count' => $expressEnabledDepartments,
                'role_based_access' => true,
                'soft_delete' => true,
                'trash_management' => true,
                'bulk_actions' => true,
                'auto_credentials' => true,
                'express_auto_generation' => true,
                'express_role_visibility' => true,
                'express_department_toggle' => true,
                'express_smart_detection' => true,
                'dynamic_express_forms' => true,
                'phone_duplicates_allowed' => true, // ✅ NEW
                'separated_password_system' => true, // ✅ NEW
                'separated_passwords_count' => $separatedPasswordsCount, // ✅ NEW
                'branch_system' => true, // ✅ NEW
                'branch_statistics' => $branchStats, // ✅ NEW
            ],
            'trash_statistics' => $trashStats,
            'password_system' => [
                'separated_system' => true,
                'email_password_length' => 10,
                'login_password_length' => 12,
                'computer_password_length' => 10,
                'employees_with_separated_passwords' => $separatedPasswordsCount
            ],
            'branch_system' => $branchStats
        ]);
    } catch (\Exception $e) {
        return response()->json([
            'status' => 'error',
            'message' => $e->getMessage(),
            'timestamp' => now()
        ], 500);
    }
})->name('health');

// ✅ NEW: Password System Health Check
Route::get('/system/password-health', function () {
    try {
        $employees = \App\Models\Employee::withoutTrashed()->get();
        
        $health = [
            'total_employees' => $employees->count(),
            'separated_system_ready' => 0,
            'email_passwords_set' => 0,
            'login_passwords_set' => 0,
            'computer_passwords_set' => 0,
            'express_credentials_set' => 0,
            'missing_passwords' => []
        ];
        
        foreach ($employees as $employee) {
            // Check email password
            if ($employee->email_password) {
                $health['email_passwords_set']++;
            } else {
                $health['missing_passwords'][] = [
                    'employee' => $employee->full_name_th,
                    'missing' => 'email_password'
                ];
            }
            
            // Check login password (hashed)
            if ($employee->password) {
                $health['login_passwords_set']++;
            } else {
                $health['missing_passwords'][] = [
                    'employee' => $employee->full_name_th,
                    'missing' => 'login_password'
                ];
            }
            
            // Check computer password
            if ($employee->computer_password) {
                $health['computer_passwords_set']++;
            }
            
            // Check Express credentials
            if ($employee->express_username && $employee->express_password) {
                $health['express_credentials_set']++;
            }
            
            // Check if separated system ready
            if ($employee->email_password && $employee->password) {
                $health['separated_system_ready']++;
            }
        }
        
        $health['system_health_percentage'] = $health['total_employees'] > 0 
            ? round(($health['separated_system_ready'] / $health['total_employees']) * 100, 1) 
            : 0;
        
        return response()->json([
            'status' => 'ok',
            'version' => '2.1.0 - Separated Password System + Branch System',
            'timestamp' => now(),
            'password_system_health' => $health
        ]);
        
    } catch (\Exception $e) {
        return response()->json([
            'status' => 'error',
            'message' => $e->getMessage(),
            'timestamp' => now()
        ], 500);
    }
})->name('system.password-health');

/*
|--------------------------------------------------------------------------
| Test Routes (เฉพาะ Local Environment)
|--------------------------------------------------------------------------
*/

if (app()->environment('local')) {
    
    Route::get('/test-express-departments', function () {
        try {
            $departments = \App\Models\Department::select('id', 'name', 'code', 'express_enabled')
                                                 ->get()
                                                 ->map(function($dept) {
                                                     return [
                                                         'id' => $dept->id,
                                                         'name' => $dept->name,
                                                         'code' => $dept->code,
                                                         'express_enabled' => $dept->express_enabled,
                                                         'express_users_count' => $dept->employees()->withoutTrashed()->whereNotNull('express_username')->count()
                                                     ];
                                                 });
            
            return response()->json([
                'success' => true,
                'message' => 'Express departments test - v2.1',
                'data' => $departments
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Express departments test failed: ' . $e->getMessage()
            ], 500);
        }
    })->name('test.express-departments');
    
    // ✅ NEW: Test trash functionality
    Route::get('/test-trash', function () {
        try {
            $trashStats = [
                'employees_active' => \App\Models\Employee::withoutTrashed()->count(),
                'employees_trashed' => \App\Models\Employee::onlyTrashed()->count(),
                'employees_total' => \App\Models\Employee::withTrashed()->count(),
                'departments_active' => \App\Models\Department::count(),
                'soft_delete_working' => class_exists('\Illuminate\Database\Eloquent\SoftDeletes')
            ];
            
            return response()->json([
                'success' => true,
                'message' => 'Trash functionality test - v2.1',
                'data' => $trashStats
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Trash test failed: ' . $e->getMessage()
            ], 500);
        }
    })->name('test.trash');
    
    // ✅ NEW: Test separated password system
    Route::get('/test-separated-passwords', function () {
        try {
            $employees = \App\Models\Employee::withoutTrashed()->take(5)->get();
            $testResults = [];
            
            foreach ($employees as $employee) {
                $testResults[] = [
                    'employee_name' => $employee->full_name_th,
                    'has_email_password' => !empty($employee->email_password),
                    'has_login_password' => !empty($employee->password),
                    'has_computer_password' => !empty($employee->computer_password),
                    'separated_system_ready' => !empty($employee->email_password) && !empty($employee->password)
                ];
            }
            
            return response()->json([
                'success' => true,
                'message' => 'Separated password system test - v2.1',
                'data' => $testResults,
                'features' => [
                    'email_password_length' => 10,
                    'login_password_length' => 12,
                    'computer_password_length' => 10,
                    'phone_duplicates_allowed' => true
                ]
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Separated password test failed: ' . $e->getMessage()
            ], 500);
        }
    })->name('test.separated-passwords');
    
    // ✅ NEW: Test branch system
    Route::get('/test-branch-system', function () {
        try {
            $branches = \App\Models\Branch::with('employees')->get();
            $testResults = [];
            
            foreach ($branches as $branch) {
                $testResults[] = [
                    'branch_name' => $branch->name,
                    'branch_code' => $branch->branch_code,
                    'employee_count' => $branch->employees->count(),
                    'active_employees' => $branch->employees->where('status', 'active')->count(),
                    'capacity' => $branch->capacity,
                    'usage_percent' => $branch->capacity ? 
                        round(($branch->employees->where('status', 'active')->count() / $branch->capacity) * 100, 1) : 0,
                    'status' => $branch->status,
                    'manager' => $branch->manager ? $branch->manager->full_name_th : null
                ];
            }
            
            return response()->json([
                'success' => true,
                'message' => 'Branch system test - v2.1',
                'data' => $testResults,
                'features' => [
                    'total_branches' => \App\Models\Branch::count(),
                    'active_branches' => \App\Models\Branch::where('status', 'active')->count(),
                    'employees_with_branch' => \App\Models\Employee::withoutTrashed()->whereNotNull('branch_id')->count(),
                    'employees_without_branch' => \App\Models\Employee::withoutTrashed()->whereNull('branch_id')->count()
                ]
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Branch system test failed: ' . $e->getMessage()
            ], 500);
        }
    })->name('test.branch-system');
    
    // Debug Express data
    Route::get('/debug/express-data', function () {
        try {
            $departments = \App\Models\Department::with('employees')->get();
            
            $debug = $departments->map(function ($dept) {
                return [
                    'id' => $dept->id,
                    'name' => $dept->name,
                    'express_enabled' => $dept->express_enabled,
                    'employee_count' => $dept->employees->count(),
                    'express_user_count' => $dept->employees->whereNotNull('express_username')->count(),
                ];
            });
            
            return response()->json([
                'success' => true,
                'debug_data' => $debug,
                'database_columns' => \Schema::getColumnListing('departments')
            ]);
            
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
        }
    })->name('debug.express-data');
    
}

/*
|--------------------------------------------------------------------------
| Fallback Route (ต้องอยู่ท้ายสุด)
|--------------------------------------------------------------------------
*/

Route::fallback(function () {
    if (Auth::check()) {
        return redirect()->route('dashboard')->with('warning', 'หน้าที่คุณต้องการไม่พบ');
    }
    
    return redirect()->route('login')->with('error', 'หน้าที่คุณต้องการไม่พบ');
});
