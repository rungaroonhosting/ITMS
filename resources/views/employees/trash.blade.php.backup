@extends('layouts.app')

@section('title', 'ถังขยะ - พนักงาน')

@section('breadcrumb')
    <li class="breadcrumb-item">
        <a href="{{ route('employees.index') }}">จัดการพนักงาน</a>
    </li>
    <li class="breadcrumb-item active">ถังขยะ</li>
@endsection

@section('content')
<!-- Page Header -->
<div class="row mb-4">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <h1 class="h3 mb-0 text-danger fw-bold">
                    <i class="fas fa-trash me-2"></i>ถังขยะ - พนักงาน
                </h1>
                <p class="text-muted mb-0">จัดการพนักงานที่ถูกลบแล้ว (เฉพาะ Super Admin)</p>
            </div>
            <div class="d-flex gap-2">
                <a href="{{ route('employees.index') }}" class="btn btn-outline-primary">
                    <i class="fas fa-arrow-left me-1"></i>กลับไปรายการพนักงาน
                </a>
                @if($trashedEmployees->count() > 0)
                    <button type="button" class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#bulkRestoreModal">
                        <i class="fas fa-undo me-1"></i>กู้คืนหลายรายการ
                    </button>
                    <button type="button" class="btn btn-danger" id="emptyTrashBtn">
                        <i class="fas fa-fire me-1"></i>ล้างถังขยะ
                    </button>
                @endif
            </div>
        </div>
    </div>
</div>

<!-- Statistics -->
<div class="row mb-4">
    <div class="col-md-4">
        <div class="card border-0 shadow-sm bg-danger text-white">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-trash fa-2x opacity-75"></i>
                    </div>
                    <div class="flex-grow-1 ms-3">
                        <div class="small opacity-75">พนักงานในถังขยะ</div>
                        <div class="h4 mb-0 fw-bold">{{ $trashedEmployees->count() }}</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card border-0 shadow-sm bg-warning text-dark">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-clock fa-2x opacity-75"></i>
                    </div>
                    <div class="flex-grow-1 ms-3">
                        <div class="small opacity-75">ลบล่าสุด</div>
                        <div class="small fw-bold">
                            @if($trashedEmployees->count() > 0)
                                {{ $trashedEmployees->first()->deleted_at->diffForHumans() }}
                            @else
                                -
                            @endif
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card border-0 shadow-sm bg-info text-white">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-shield-alt fa-2x opacity-75"></i>
                    </div>
                    <div class="flex-grow-1 ms-3">
                        <div class="small opacity-75">การป้องกัน</div>
                        <div class="small fw-bold">Soft Delete</div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@if($trashedEmployees->count() > 0)
<!-- Warning Alert -->
<div class="alert alert-warning d-flex align-items-center mb-4" role="alert">
    <i class="fas fa-exclamation-triangle me-3 fa-2x"></i>
    <div>
        <h6 class="mb-1">⚠️ คำเตือนสำคัญ</h6>
        <p class="mb-0">
            ข้อมูลในถังขยะยังสามารถ <strong>กู้คืนได้</strong> หากต้องการลบอย่างถาวร ให้ใช้ปุ่ม "ลบถาวร" หรือ "ล้างถังขยะ"
            <br><strong>การลบถาวรจะไม่สามารถกู้คืนได้อีก!</strong>
        </p>
    </div>
</div>

<!-- Search and Filter -->
<div class="card mb-4">
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-6">
                <div class="input-group">
                    <span class="input-group-text">
                        <i class="fas fa-search"></i>
                    </span>
                    <input type="text" class="form-control" id="searchTrashInput" placeholder="ค้นหาในถังขยะ...">
                </div>
            </div>
            <div class="col-md-3">
                <select class="form-select" id="deletedDateFilter">
                    <option value="">วันที่ลบทั้งหมด</option>
                    <option value="today">วันนี้</option>
                    <option value="week">สัปดาห์นี้</option>
                    <option value="month">เดือนนี้</option>
                </select>
            </div>
            <div class="col-md-3">
                <button type="button" class="btn btn-outline-secondary w-100" id="clearTrashFilters">
                    <i class="fas fa-times me-1"></i>ล้างตัวกรอง
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Trashed Employees Table -->
<div class="card border-0 shadow-sm">
    <div class="card-header bg-white">
        <div class="d-flex justify-content-between align-items-center">
            <h6 class="mb-0">รายการพนักงานในถังขยะ</h6>
            <div class="d-flex gap-2">
                <span class="badge bg-danger">{{ $trashedEmployees->count() }} รายการ</span>
            </div>
        </div>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover mb-0" id="trashedEmployeesTable">
                <thead class="table-light">
                    <tr>
                        <th width="50">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="selectAllTrashed">
                            </div>
                        </th>
                        <th>รหัส</th>
                        <th>ชื่อ-นามสกุล</th>
                        <th>แผนก</th>
                        <th>อีเมล</th>
                        <th>วันที่ลบ</th>
                        <th width="180">จัดการ</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach($trashedEmployees as $employee)
                        <tr data-id="{{ $employee->id }}" data-deleted-date="{{ $employee->deleted_at->format('Y-m-d') }}">
                            <td>
                                <div class="form-check">
                                    <input class="form-check-input trashed-employee-checkbox" type="checkbox" value="{{ $employee->id }}">
                                </div>
                            </td>
                            <td>
                                <span class="badge bg-secondary opacity-75">{{ $employee->employee_code }}</span>
                            </td>
                            <td>
                                <div class="d-flex align-items-center">
                                    <div class="flex-shrink-0 me-3">
                                        <div class="bg-light rounded-circle d-flex align-items-center justify-content-center opacity-50" style="width: 40px; height: 40px;">
                                            <i class="fas fa-user-slash text-muted"></i>
                                        </div>
                                    </div>
                                    <div>
                                        <div class="fw-bold text-muted">{{ $employee->full_name_th }}</div>
                                        <small class="text-muted">{{ $employee->full_name_en }}</small>
                                        @if($employee->nickname)
                                            <div><small class="badge bg-light text-dark opacity-75">"{{ $employee->nickname }}"</small></div>
                                        @endif
                                    </div>
                                </div>
                            </td>
                            <td>
                                @if($employee->department)
                                    <div class="d-flex align-items-center opacity-75">
                                        <span class="badge bg-secondary me-2">{{ $employee->department->code }}</span>
                                        <span class="text-muted">{{ $employee->department->name }}</span>
                                    </div>
                                @else
                                    <span class="text-muted">ไม่ระบุ</span>
                                @endif
                            </td>
                            <td>
                                <div class="text-muted">{{ $employee->email }}</div>
                                @if($employee->phone)
                                    <div><small class="text-muted opacity-75">{{ $employee->phone }}</small></div>
                                @endif
                            </td>
                            <td>
                                <div class="text-danger fw-bold">
                                    {{ $employee->deleted_at->format('d/m/Y H:i') }}
                                </div>
                                <small class="text-muted">{{ $employee->deleted_at->diffForHumans() }}</small>
                            </td>
                            <td>
                                <div class="btn-group" role="group">
                                    <button type="button" 
                                            class="btn btn-sm btn-success restore-btn" 
                                            data-id="{{ $employee->id }}" 
                                            data-name="{{ $employee->full_name_th }}"
                                            data-bs-toggle="tooltip" title="กู้คืน">
                                        <i class="fas fa-undo"></i>
                                    </button>
                                    
                                    <button type="button" 
                                            class="btn btn-sm btn-outline-info preview-btn" 
                                            data-id="{{ $employee->id }}"
                                            data-bs-toggle="tooltip" title="ดูข้อมูล">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    
                                    <button type="button" 
                                            class="btn btn-sm btn-danger force-delete-btn" 
                                            data-id="{{ $employee->id }}" 
                                            data-name="{{ $employee->full_name_th }}"
                                            data-bs-toggle="tooltip" title="ลบถาวร">
                                        <i class="fas fa-fire"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    @endforeach
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Bulk Restore Modal -->
<div class="modal fade" id="bulkRestoreModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-undo me-2"></i>กู้คืนหลายรายการ
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    กรุณาเลือกพนักงานที่ต้องการกู้คืนจากถังขยะ
                </div>
                <div id="selectedTrashCount" class="text-muted"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ยกเลิก</button>
                <button type="button" class="btn btn-success" id="executeBulkRestore">
                    <i class="fas fa-undo me-1"></i>กู้คืนที่เลือก
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Employee Preview Modal -->
<div class="modal fade" id="employeePreviewModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-eye me-2"></i>ดูข้อมูลพนักงาน
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="employeePreviewContent">
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">กำลังโหลด...</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">ปิด</button>
            </div>
        </div>
    </div>
</div>

@else
<!-- Empty State -->
<div class="card border-0 shadow-sm">
    <div class="card-body text-center py-5">
        <div class="text-muted">
            <i class="fas fa-trash fa-5x mb-4 opacity-25"></i>
            <h4>ถังขยะว่างเปล่า</h4>
            <p class="mb-4">ไม่มีพนักงานในถังขยะ</p>
            <a href="{{ route('employees.index') }}" class="btn btn-primary">
                <i class="fas fa-arrow-left me-1"></i>กลับไปรายการพนักงาน
            </a>
        </div>
    </div>
</div>
@endif

@endsection

@push('scripts')
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize tooltips
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
    
    const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content');
    
    // Search and filter functionality
    const searchInput = document.getElementById('searchTrashInput');
    const deletedDateFilter = document.getElementById('deletedDateFilter');
    const table = document.getElementById('trashedEmployeesTable');
    
    function filterTrashTable() {
        if (!table) return;
        
        const searchTerm = searchInput?.value.toLowerCase() || '';
        const dateFilter = deletedDateFilter?.value || '';
        const rows = table.getElementsByTagName('tbody')[0]?.getElementsByTagName('tr') || [];
        
        const today = new Date();
        const weekAgo = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);
        const monthAgo = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);
        
        for (let row of rows) {
            if (row.querySelector('td')) {
                const nameCell = row.cells[2];
                const emailCell = row.cells[4];
                const deletedDateStr = row.dataset.deletedDate;
                const deletedDate = new Date(deletedDateStr);
                
                const name = nameCell?.textContent.toLowerCase() || '';
                const email = emailCell?.textContent.toLowerCase() || '';
                
                const matchesSearch = name.includes(searchTerm) || email.includes(searchTerm);
                
                let matchesDate = true;
                if (dateFilter === 'today') {
                    matchesDate = deletedDate.toDateString() === today.toDateString();
                } else if (dateFilter === 'week') {
                    matchesDate = deletedDate >= weekAgo;
                } else if (dateFilter === 'month') {
                    matchesDate = deletedDate >= monthAgo;
                }
                
                row.style.display = matchesSearch && matchesDate ? '' : 'none';
            }
        }
        
        updateVisibleTrashCount();
    }
    
    function updateVisibleTrashCount() {
        if (!table) return;
        
        const visibleRows = Array.from(table.getElementsByTagName('tbody')[0]?.getElementsByTagName('tr') || [])
                                .filter(row => row.style.display !== 'none' && row.querySelector('td'));
        
        const headerBadge = document.querySelector('.card-header .badge');
        if (headerBadge) {
            const totalCount = {{ $trashedEmployees->count() }};
            const visibleCount = visibleRows.length;
            
            if (visibleCount === totalCount) {
                headerBadge.textContent = `${totalCount} รายการ`;
            } else {
                headerBadge.textContent = `${visibleCount}/${totalCount} รายการ`;
            }
        }
    }
    
    searchInput?.addEventListener('input', filterTrashTable);
    deletedDateFilter?.addEventListener('change', filterTrashTable);
    
    // Clear filters
    document.getElementById('clearTrashFilters')?.addEventListener('click', function() {
        if (searchInput) searchInput.value = '';
        if (deletedDateFilter) deletedDateFilter.value = '';
        filterTrashTable();
    });
    
    // Select all functionality
    document.getElementById('selectAllTrashed')?.addEventListener('change', function() {
        const checkboxes = document.querySelectorAll('.trashed-employee-checkbox');
        checkboxes.forEach(checkbox => {
            const row = checkbox.closest('tr');
            if (row.style.display !== 'none') {  
                checkbox.checked = this.checked;
            }
        });
        updateSelectedTrashCount();
    });
    
    // Individual checkboxes
    document.querySelectorAll('.trashed-employee-checkbox').forEach(checkbox => {
        checkbox.addEventListener('change', updateSelectedTrashCount);
    });
    
    function updateSelectedTrashCount() {
        const selected = document.querySelectorAll('.trashed-employee-checkbox:checked').length;
        const countElement = document.getElementById('selectedTrashCount');
        if (countElement) {
            countElement.textContent = selected > 0 ? `เลือกแล้ว ${selected} รายการ` : '';
        }
    }
    
    // Restore individual employee
    document.querySelectorAll('.restore-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
            const employeeId = this.dataset.id;
            const employeeName = this.dataset.name;
            
            if (!confirm(`ต้องการกู้คืนพนักงาน "${employeeName}" หรือไม่?`)) {
                return;
            }
            
            try {
                const response = await fetch(`/employees/trash/${employeeId}/restore`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': csrfToken
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification(data.message, 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification('เกิดข้อผิดพลาดในการกู้คืน', 'error');
            }
        });
    });
    
    // Force delete individual employee
    document.querySelectorAll('.force-delete-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
            const employeeId = this.dataset.id;
            const employeeName = this.dataset.name;
            
            if (!confirm(`⚠️ ต้องการลบพนักงาน "${employeeName}" อย่างถาวรหรือไม่?\n\nการลบถาวรจะไม่สามารถกู้คืนได้อีก!`)) {
                return;
            }
            
            if (!confirm(`❌ ยืนยันอีกครั้ง: ลบ "${employeeName}" อย่างถาวร?\n\nข้อมูลจะหายไปตลอดกาล!`)) {
                return;
            }
            
            try {
                const response = await fetch(`/employees/trash/${employeeId}/force`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': csrfToken
                    }
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showNotification(data.message, 'success');
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification('เกิดข้อผิดพลาดในการลบถาวร', 'error');
            }
        });
    });
    
    // ✅ FIXED: Preview employee - ใช้ Modal แทน Alert
    document.querySelectorAll('.preview-btn').forEach(btn => {
        btn.addEventListener('click', async function() {
            const employeeId = this.dataset.id;
            const modal = new bootstrap.Modal(document.getElementById('employeePreviewModal'));
            const contentDiv = document.getElementById('employeePreviewContent');
            
            // Show loading
            contentDiv.innerHTML = `
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">กำลังโหลด...</span>
                    </div>
                </div>
            `;
            
            modal.show();
            
            try {
                // ✅ FIXED: ใช้ show route แทน preview route ที่ไม่มี
                const response = await fetch(`/employees/${employeeId}`);
                
                if (response.ok) {
                    // Since this returns HTML, we'll show basic info instead
                    const trashedEmployee = @json($trashedEmployees->keyBy('id'));
                    const employee = trashedEmployee[employeeId];
                    
                    if (employee) {
                        contentDiv.innerHTML = `
                            <div class="row">
                                <div class="col-md-4 text-center">
                                    <div class="bg-light rounded-circle d-flex align-items-center justify-content-center mx-auto mb-3" style="width: 100px; height: 100px;">
                                        <i class="fas fa-user-slash text-muted fa-3x"></i>
                                    </div>
                                    <span class="badge bg-danger">ถูกลบแล้ว</span>
                                </div>
                                <div class="col-md-8">
                                    <h6 class="fw-bold">ข้อมูลพนักงาน</h6>
                                    <table class="table table-sm">
                                        <tr>
                                            <td class="fw-bold">รหัสพนักงาน:</td>
                                            <td>${employee.employee_code}</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold">ชื่อ (ไทย):</td>
                                            <td>${employee.full_name_th}</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold">ชื่อ (อังกฤษ):</td>
                                            <td>${employee.full_name_en || 'ไม่ระบุ'}</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold">อีเมล:</td>
                                            <td>${employee.email}</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold">เบอร์โทร:</td>
                                            <td>${employee.phone || 'ไม่ระบุ'}</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold">แผนก:</td>
                                            <td>${employee.department ? employee.department.name : 'ไม่ระบุ'}</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold">สาขา:</td>
                                            <td>${employee.branch ? employee.branch.name : 'ไม่ระบุ'}</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold">บทบาท:</td>
                                            <td>${employee.role}</td>
                                        </tr>
                                        <tr>
                                            <td class="fw-bold">วันที่ลบ:</td>
                                            <td class="text-danger">${new Date(employee.deleted_at).toLocaleString('th-TH')}</td>
                                        </tr>
                                    </table>
                                </div>
                            </div>
                        `;
                    } else {
                        throw new Error('ไม่พบข้อมูลพนักงาน');
                    }
                } else {
                    throw new Error('ไม่สามารถเข้าถึงข้อมูลได้');
                }
            } catch (error) {
                contentDiv.innerHTML = `
                    <div class="alert alert-danger">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        เกิดข้อผิดพลาดในการดูข้อมูล: ${error.message}
                    </div>
                `;
            }
        });
    });
    
    // ✅ FIXED: Bulk restore - ใช้ route ที่ถูกต้อง
    document.getElementById('executeBulkRestore')?.addEventListener('click', async function() {
        const selected = Array.from(document.querySelectorAll('.trashed-employee-checkbox:checked'))
                             .map(cb => cb.value);
        
        if (selected.length === 0) {
            showNotification('กรุณาเลือกพนักงานที่ต้องการกู้คืน', 'warning');
            return;
        }
        
        if (!confirm(`ต้องการกู้คืนพนักงาน ${selected.length} คนหรือไม่?`)) {
            return;
        }
        
        try {
            this.disabled = true;
            this.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>กำลังกู้คืน...';
            
            // ✅ FIXED: ใช้ bulk restore route ที่มีอยู่ใน controller
            let successCount = 0;
            let failedCount = 0;
            
            for (const employeeId of selected) {
                try {
                    const response = await fetch(`/employees/trash/${employeeId}/restore`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-TOKEN': csrfToken
                        }
                    });
                    
                    const data = await response.json();
                    if (data.success) {
                        successCount++;
                    } else {
                        failedCount++;
                    }
                } catch (error) {
                    failedCount++;
                }
            }
            
            if (successCount > 0) {
                showNotification(`กู้คืนสำเร็จ ${successCount} คน${failedCount > 0 ? `, ล้มเหลว ${failedCount} คน` : ''}`, 'success');
                setTimeout(() => location.reload(), 1500);
            } else {
                showNotification('ไม่สามารถกู้คืนได้', 'error');
            }
            
        } catch (error) {
            showNotification('เกิดข้อผิดพลาดในการกู้คืนหลายรายการ', 'error');
        } finally {
            this.disabled = false;
            this.innerHTML = '<i class="fas fa-undo me-1"></i>กู้คืนที่เลือก';
            bootstrap.Modal.getInstance(document.getElementById('bulkRestoreModal'))?.hide();
        }
    });
    
    // Empty trash
    document.getElementById('emptyTrashBtn')?.addEventListener('click', async function() {
        const trashCount = {{ $trashedEmployees->count() }};
        
        if (!confirm(`⚠️ ต้องการล้างถังขยะ (ลบ ${trashCount} คนอย่างถาวร) หรือไม่?\n\nข้อมูลทั้งหมดจะหายไปตลอดกาล!`)) {
            return;
        }
        
        if (!confirm(`❌ ยืนยันอีกครั้ง: ล้างถังขยะทั้งหมด?\n\nการกระทำนี้ไม่สามารถยกเลิกได้!`)) {
            return;
        }
        
        if (!confirm(`🔥 ยืนยันครั้งสุดท้าย: ลบข้อมูล ${trashCount} คนอย่างถาวร?`)) {
            return;
        }
        
        try {
            this.disabled = true;
            this.innerHTML = '<i class="fas fa-spinner fa-spin me-1"></i>กำลังล้าง...';
            
            const response = await fetch('/employees/trash/empty', {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': csrfToken
                }
            });
            
            const data = await response.json();
            
            if (data.success) {
                showNotification(data.message, 'success');
                setTimeout(() => location.reload(), 1500);
            } else {
                showNotification(data.message, 'error');
                this.disabled = false;
                this.innerHTML = '<i class="fas fa-fire me-1"></i>ล้างถังขยะ';
            }
        } catch (error) {
            showNotification('เกิดข้อผิดพลาดในการล้างถังขยะ', 'error');
            this.disabled = false;
            this.innerHTML = '<i class="fas fa-fire me-1"></i>ล้างถังขยะ';
        }
    });
    
    // ✅ ENHANCED: Notification function with better styling
    function showNotification(message, type = 'info') {
        const alertClass = {
            'success': 'alert-success',
            'error': 'alert-danger',
            'warning': 'alert-warning',
            'info': 'alert-info'
        }[type] || 'alert-info';
        
        const iconClass = {
            'success': 'fa-check-circle',
            'error': 'fa-exclamation-triangle',
            'warning': 'fa-exclamation-circle',
            'info': 'fa-info-circle'
        }[type] || 'fa-info-circle';
        
        const bgColor = {
            'success': '#28a745',
            'error': '#dc3545',
            'warning': '#ffc107',
            'info': '#17a2b8'
        }[type] || '#17a2b8';
        
        const alert = document.createElement('div');
        alert.className = `alert ${alertClass} alert-dismissible fade show position-fixed`;
        alert.style.cssText = `
            top: 20px; 
            right: 20px; 
            z-index: 9999; 
            min-width: 350px; 
            max-width: 500px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            border: none;
            border-left: 4px solid ${bgColor};
            animation: slideInRight 0.3s ease-out;
        `;
        alert.innerHTML = `
            <div class="d-flex align-items-center">
                <i class="fas ${iconClass} me-2 fa-lg"></i>
                <div class="flex-grow-1">${message}</div>
                <button type="button" class="btn-close ms-2" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
        
        // Add animation CSS if not exists
        if (!document.getElementById('notification-styles')) {
            const style = document.createElement('style');
            style.id = 'notification-styles';
            style.textContent = `
                @keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @keyframes slideOutRight {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
                .notification-exit {
                    animation: slideOutRight 0.3s ease-in;
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(alert);
        
        // Auto dismiss after 5 seconds with animation
        setTimeout(() => {
            if (alert.parentNode) {
                alert.classList.add('notification-exit');
                setTimeout(() => {
                    if (alert.parentNode) {
                        alert.remove();
                    }
                }, 300);
            }
        }, 5000);
        
        // Manual dismiss with animation
        const closeBtn = alert.querySelector('.btn-close');
        if (closeBtn) {
            closeBtn.addEventListener('click', () => {
                alert.classList.add('notification-exit');
                setTimeout(() => {
                    if (alert.parentNode) {
                        alert.remove();
                    }
                }, 300);
            });
        }
    }
    
    // ✅ Enhanced keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        // Ctrl+A - Select all visible items
        if (e.ctrlKey && e.key === 'a' && e.target.tagName !== 'INPUT') {
            e.preventDefault();
            const selectAllCheckbox = document.getElementById('selectAllTrashed');
            if (selectAllCheckbox) {
                selectAllCheckbox.checked = !selectAllCheckbox.checked;
                selectAllCheckbox.dispatchEvent(new Event('change'));
            }
        }
        
        // Escape - Clear filters and deselect
        if (e.key === 'Escape') {
            // Clear search
            const searchInput = document.getElementById('searchTrashInput');
            if (searchInput && searchInput.value) {
                searchInput.value = '';
                searchInput.dispatchEvent(new Event('input'));
            }
            
            // Clear filter
            const dateFilter = document.getElementById('deletedDateFilter');
            if (dateFilter && dateFilter.value) {
                dateFilter.value = '';
                dateFilter.dispatchEvent(new Event('change'));
            }
            
            // Deselect all
            const selectAllCheckbox = document.getElementById('selectAllTrashed');
            if (selectAllCheckbox && selectAllCheckbox.checked) {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.dispatchEvent(new Event('change'));
            }
        }
        
        // Ctrl+R - Bulk restore (if items selected)
        if (e.ctrlKey && e.key === 'r') {
            e.preventDefault();
            const selected = document.querySelectorAll('.trashed-employee-checkbox:checked');
            if (selected.length > 0) {
                const restoreBtn = document.getElementById('executeBulkRestore');
                if (restoreBtn) {
                    const modal = new bootstrap.Modal(document.getElementById('bulkRestoreModal'));
                    modal.show();
                }
            }
        }
    });
    
    // ✅ Enhanced table interactions
    document.querySelectorAll('#trashedEmployeesTable tbody tr').forEach(row => {
        // Double click to preview
        row.addEventListener('dblclick', function() {
            const previewBtn = this.querySelector('.preview-btn');
            if (previewBtn) {
                previewBtn.click();
            }
        });
        
        // Right click context menu (basic)
        row.addEventListener('contextmenu', function(e) {
            e.preventDefault();
            const employeeId = this.dataset.id;
            const checkbox = this.querySelector('.trashed-employee-checkbox');
            
            if (checkbox && !checkbox.checked) {
                checkbox.checked = true;
                checkbox.dispatchEvent(new Event('change'));
            }
            
            // Show a simple context menu effect
            this.style.backgroundColor = 'rgba(255, 193, 7, 0.1)';
            setTimeout(() => {
                this.style.backgroundColor = '';
            }, 1000);
        });
    });
    
    // Initialize count and focus search
    updateVisibleTrashCount();
    
    // Focus search input on page load
    if (searchInput) {
        searchInput.focus();
    }
    
    // ✅ Add refresh button functionality
    const refreshBtn = document.createElement('button');
    refreshBtn.className = 'btn btn-outline-secondary btn-sm';
    refreshBtn.innerHTML = '<i class="fas fa-sync-alt me-1"></i>รีเฟรช';
    refreshBtn.style.cssText = 'position: fixed; bottom: 20px; right: 20px; z-index: 1000;';
    refreshBtn.addEventListener('click', () => location.reload());
    document.body.appendChild(refreshBtn);
    
    console.log('🗑️ Trash Management System initialized successfully');
    console.log(`📊 Total trashed employees: {{ $trashedEmployees->count() }}`);
    console.log('🔧 Features: Search, Filter, Bulk Restore, Individual Actions, Keyboard Shortcuts');
    console.log('⌨️ Shortcuts: Ctrl+A (Select All), Escape (Clear), Ctrl+R (Bulk Restore), Double-click (Preview)');
});
</script>

<style>
/* ✅ ENHANCED: Improved styling */
.opacity-25 { opacity: 0.25 !important; }
.opacity-50 { opacity: 0.5 !important; }
.opacity-75 { opacity: 0.75 !important; }

/* Trash table styles */
#trashedEmployeesTable tbody tr {
    background-color: rgba(248, 249, 250, 0.5);
    transition: all 0.2s ease;
}

#trashedEmployeesTable tbody tr:hover {
    background-color: rgba(248, 249, 250, 0.8) !important;
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

/* Enhanced row selection */
#trashedEmployeesTable tbody tr:has(.trashed-employee-checkbox:checked) {
    background-color: rgba(255, 193, 7, 0.1) !important;
    border-left: 3px solid #ffc107;
}

/* Deleted date highlighting */
.text-danger.fw-bold {
    font-family: 'Courier New', monospace;
    font-size: 0.9em;
}

/* Button animations */
.restore-btn {
    transition: all 0.2s ease;
}

.restore-btn:hover {
    transform: scale(1.1);
    box-shadow: 0 2px 8px rgba(40, 167, 69, 0.3);
}

.force-delete-btn {
    transition: all 0.2s ease;
}

.force-delete-btn:hover {
    transform: scale(1.1);
    animation: pulse-danger 1s infinite;
}

@keyframes pulse-danger {
    0% { box-shadow: 0 0 0 0 rgba(220, 53, 69, 0.7); }
    70% { box-shadow: 0 0 0 10px rgba(220, 53, 69, 0); }
    100% { box-shadow: 0 0 0 0 rgba(220, 53, 69, 0); }
}

.preview-btn:hover {
    transform: scale(1.05);
    box-shadow: 0 2px 8px rgba(23, 162, 184, 0.3);
}

/* Empty state styling */
.fa-5x {
    font-size: 5em !important;
}

/* Enhanced search and filter */
.form-control:focus,
.form-select:focus {
    border-color: #B54544;
    box-shadow: 0 0 0 0.2rem rgba(181, 69, 68, 0.25);
}

/* Statistics cards hover effect */
.card {
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 20px rgba(0,0,0,0.1) !important;
}

/* Enhanced modal styling */
.modal-content {
    border: none;
    box-shadow: 0 10px 40px rgba(0,0,0,0.2);
}

.modal-header {
    background: linear-gradient(135deg, #B54544 0%, #E6952A 100%);
    color: white;
    border-bottom: none;
}

.modal-header .btn-close {
    filter: invert(1);
}

/* Loading spinner enhancement */
.spinner-border {
    animation-duration: 0.75s;
}

/* Enhanced alert styling */
.alert {
    border: none;
    border-radius: 8px;
}

.alert-warning {
    background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
    border-left: 4px solid #ffc107;
}

/* Enhanced button groups */
.btn-group .btn {
    transition: all 0.2s ease;
}

.btn-group .btn:hover {
    z-index: 2;
}

/* Enhanced table header */
.table thead th {
    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
    border-bottom: 2px solid #dee2e6;
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.85em;
    letter-spacing: 0.5px;
}

/* Enhanced checkbox styling */
.form-check-input:checked {
    background-color: #B54544;
    border-color: #B54544;
}

.form-check-input:focus {
    border-color: #B54544;
    outline: 0;
    box-shadow: 0 0 0 0.25rem rgba(181, 69, 68, 0.25);
}

/* Enhanced badge styling */
.badge {
    font-size: 0.75em;
    padding: 0.35em 0.65em;
}

.badge.bg-secondary {
    background-color: #6c757d !important;
}

/* Enhanced breadcrumb */
.breadcrumb-item + .breadcrumb-item::before {
    content: "›";
    color: #B54544;
    font-weight: bold;
}

/* Page header enhancement */
.h3.text-danger {
    background: linear-gradient(135deg, #B54544 0%, #E6952A 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
}

/* Responsive enhancements */
@media (max-width: 768px) {
    .d-flex.gap-2 {
        flex-direction: column;
        gap: 0.5rem !important;
    }
    
    .btn-group {
        flex-direction: column;
    }
    
    .btn-group .btn {
        border-radius: 0.375rem !important;
        margin-bottom: 2px;
    }
    
    .table-responsive {
        font-size: 0.9em;
    }
    
    .modal-dialog {
        margin: 1rem;
    }
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
    .card {
        background-color: #2d3748;
        border-color: #4a5568;
    }
    
    .table {
        color: #e2e8f0;
    }
    
    .table thead th {
        background: linear-gradient(135deg, #2d3748 0%, #4a5568 100%);
        color: #e2e8f0;
    }
    
    .form-control,
    .form-select {
        background-color: #2d3748;
        border-color: #4a5568;
        color: #e2e8f0;
    }
}

/* Custom scrollbar */
::-webkit-scrollbar {
    width: 8px;
    height: 8px;
}

::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 4px;
}

::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #B54544 0%, #E6952A 100%);
    border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #a03e3e 0%, #d4851f 100%);
}

/* Print styles */
@media print {
    .btn, .modal, .position-fixed {
        display: none !important;
    }
    
    .card {
        border: 1px solid #000 !important;
        box-shadow: none !important;
    }
    
    .table {
        font-size: 12px;
    }
    
    .text-danger {
        color: #000 !important;
    }
}
</style>
@endpush
